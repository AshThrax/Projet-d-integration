// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dataInfraTheather.Infrastructure.Persistence;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Catalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplexeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComplexeId");

                    b.ToTable("Catalogue");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.CataloguePiece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogueId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PieceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.HasIndex("PieceId");

                    b.ToTable("CataloguePiece");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRepresentation")
                        .HasColumnType("int");

                    b.Property<int>("NombreDePlace")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdRepresentation");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Complexe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Complexe");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageRessource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Piece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Auteur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duree")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Representation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PieceId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceCurrent")
                        .HasColumnType("int");

                    b.Property<int>("PlaceMaximum")
                        .HasColumnType("int");

                    b.Property<int>("Prix")
                        .HasColumnType("int");

                    b.Property<int>("SalledeTheatreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Seance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PieceId");

                    b.HasIndex("SalledeTheatreId");

                    b.ToTable("Representations");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.SalleDeTheatre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplexeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceMax")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComplexeId");

                    b.ToTable("SalleDeTheatres");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Siege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.HasIndex("SalleId");

                    b.ToTable("Siege");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Catalogue", b =>
                {
                    b.HasOne("Domain.Entity.TheatherEntity.Complexe", "Complexe")
                        .WithMany("Catalogue")
                        .HasForeignKey("ComplexeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complexe");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.CataloguePiece", b =>
                {
                    b.HasOne("Domain.Entity.TheatherEntity.Catalogue", "Catalogue")
                        .WithMany()
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TheatherEntity.Piece", "Piece")
                        .WithMany()
                        .HasForeignKey("PieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");

                    b.Navigation("Piece");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Command", b =>
                {
                    b.HasOne("Domain.Entity.TheatherEntity.Representation", "Representation")
                        .WithMany("Commands")
                        .HasForeignKey("IdRepresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Representation");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Piece", b =>
                {
                    b.HasOne("Domain.Entity.TheatherEntity.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Domain.Entity.TheatherEntity.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Representation", b =>
                {
                    b.HasOne("Domain.Entity.TheatherEntity.Piece", "Piece")
                        .WithMany("Representations")
                        .HasForeignKey("PieceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TheatherEntity.SalleDeTheatre", "SalleDeTheatre")
                        .WithMany("Representations")
                        .HasForeignKey("SalledeTheatreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Piece");

                    b.Navigation("SalleDeTheatre");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.SalleDeTheatre", b =>
                {
                    b.HasOne("Domain.Entity.TheatherEntity.Complexe", "Complexe")
                        .WithMany("SalleDeTheatres")
                        .HasForeignKey("ComplexeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complexe");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Siege", b =>
                {
                    b.HasOne("Domain.Entity.TheatherEntity.Command", null)
                        .WithMany("sieges")
                        .HasForeignKey("CommandId");

                    b.HasOne("Domain.Entity.TheatherEntity.SalleDeTheatre", "SalleDeTheatre")
                        .WithMany("sieges")
                        .HasForeignKey("SalleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SalleDeTheatre");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Command", b =>
                {
                    b.Navigation("sieges");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Complexe", b =>
                {
                    b.Navigation("Catalogue");

                    b.Navigation("SalleDeTheatres");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Piece", b =>
                {
                    b.Navigation("Representations");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.Representation", b =>
                {
                    b.Navigation("Commands");
                });

            modelBuilder.Entity("Domain.Entity.TheatherEntity.SalleDeTheatre", b =>
                {
                    b.Navigation("Representations");

                    b.Navigation("sieges");
                });
#pragma warning restore 612, 618
        }
    }
}
