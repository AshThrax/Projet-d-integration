@page "/Annonce"
@using Blazor.UI.Data.ServiceResult
@using Blazor.UI.Data.services.Annonce
@using Blazor.UI.Data.ModelViews.Annonce
@inject IAnnonceService AnnonceService;
<div class="m-2 p-2 shadow-sm">

    @if (GetAnnonceDto != null)
    {
        <hr class="featurette-divider">
        <h3>vos Annonce</h3>

        <div class="row featurette">
            <div class="col-md-5">
                <svg class="bd-placeholder-img bd-placeholder-img-lg featurette-image img-fluid mx-auto" width="500" height="500" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 500x500" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="var(--bs-secondary-bg)" /><text x="50%" y="50%" fill="var(--bs-secondary-color)" dy=".3em">500x500</text></svg>
            </div>
            <div class="col-md-7">
                @foreach (AnnonceDto? item in GetAnnonceDto.Items)
                {
                    <div class="row">
                        <h2 class="featurette-heading fw-normal lh-1">
                            <span class="text-body-secondary">@item.Title</span>
                        </h2>
                        <p class="lead">
                            @item.Description
                        </p>
                        <p> @item.CreatedDate</p>
                    </div>
                }
            </div>
            <div class="row">
                <div class="btn-group float-end">
                    <a href="#" class="btn btn btn-outline-dark" @onclick="()=>PreviousPage()"> Previous</a>
                    <a href="#" class="btn btn-outline-dark" @onclick="()=>NextPage()">Next</a>
                </div>
            </div>
        </div>
    }
</div>
@code {
    public Pagination<AnnonceDto> GetAnnonceDto { get; set; }
    public int pageIndex { get; set; } = 1;
    protected override async Task OnInitializedAsync()
    {
        GetAnnonceDto = await AnnonceService.GetAll(pageIndex);
        await Task.Delay(1000);
    }
    #region pagination
    public async Task NextPage()
    {
        if (GetAnnonceDto.HasNextPage)
        {
            pageIndex++;
            GetAnnonceDto = await AnnonceService.GetAll(pageIndex);
        }
    }
    public async Task PreviousPage()
    {
        if (GetAnnonceDto.HasPreviousPage)
        {
            pageIndex--;
            GetAnnonceDto = await AnnonceService.GetAll(pageIndex);
        }
    }
    #endregion
}