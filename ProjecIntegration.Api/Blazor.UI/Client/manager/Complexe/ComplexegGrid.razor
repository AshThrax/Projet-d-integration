@page "/manager/complexe"
@using Blazor.UI.Data.modelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IComplexeService comp;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
<PageTitle>Complexe</PageTitle>
<h1>Gestion des Complexe</h1>
<div class="m-4 p-4">
    <div class=" btn-group rounded float-end">
        <div class="col"></div>
        <div class="col"></div>
        <div class="col"></div>
        <button type="button" class="col col-sm-3  btn btn-primary" @onclick="AddComplexe">Ajouter un Complexe</button>
        <button type="button" class="col col-sm-3   btn btn-warning" @onclick="AddSalle">Ajouter une Salle</button>
        <button type="button" class="col col-sm-3   btn btn-warning" @onclick="AddCatalogue">Ajouter un Complexe</button>
    </div>
</div>
<br />
<div class="jumbotron  m-2 p-2">
    <div class="row">
        <div class="col bg-white m-4 p-4 w-50 shadow-sm border-rounded">

            @if (complexetab == null)
            {
                <Blazor.UI.Client.Shared.Load></Blazor.UI.Client.Shared.Load>
            }
            else
            {
                <div class="">

                    <QuickGrid Items="@complexetab.AsQueryable()">
                        <PropertyColumn Property="@(p => p.Id)" Sortable="true">
                            <TemplateColumn Context="item">
                                <div>
                                    @item.Id
                                    <button @onclick="() => NavigateToDetails(item.Id)">View Details</button>
                                </div>
                            </TemplateColumn>
                        </PropertyColumn>
                        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.SalleDeTheatres.Capacity)" Sortable="true" />
                        <TemplateColumn Context="item">
                            <div>
                                @item.Id
                                <button @onclick="() =>SelectComplexedetails(item) " >View Details</button>
                            </div>
                        </TemplateColumn>
                        
                    </QuickGrid>

                </div>
            }
        </div>
        <div class="col bg-white  m-4 p-4 w-50">
            @if(SelectComplexe !=null)
            {
                <div class=" form-group mb-3">
                    <h4 class="form-label">Nom:</h4>
                    <p>@SelectComplexe?.Name</p>

                    <h4 class="form-label">Description:</h4>
                    <p>@SelectComplexe?.Description</p>

                    <h4 class="form-label">Address:</h4>
                    <p>@SelectComplexe?.Adress</p>

                    <h4 class="form-label" for="address">Address:</h4>
                    <p>@SelectComplexe?.AddedTime</p>
                    <h4 l class="form-label" for="address">Salle </h4>
                    @if (SelectComplexe?.SalleDeTheatres?.Count > 0)
                    {
                        <p>Possède:@SelectComplexe?.SalleDeTheatres?.Count: Salle De théatre </p>
                        <p>@SelectComplexe?.Catalogue?.Count</p>

                    }
                    else
                    {
                        <p>Ce Complexe ne Possède pas encore de Salle</p>

                    }
                    <h4 l class="form-label" for="address">Catalogue </h4>
                    @if (SelectComplexe?.Catalogue?.Count >0)
                    {
                        <p>Possède : @SelectComplexe?.Catalogue?.Count : Catalogue </p>
                        <p>@SelectComplexe?.Catalogue?.Count</p>
                        
                    }
                    else
                    {
                        <p>Ce Complexe ne Possède pas encore de Catalogue</p>
                   
                    }

                    <!-- Add other input fields based on your UpdateComplexeDto properties -->
                    <br />
                    <button class="btn btn-primary" @onclick="()=>GetSalleByComplexe(SelectComplexe.Id)" type="button">Salle De théatre</button>
                </div>

            }
            else
            {
                <Blazor.UI.Client.Shared.Load></Blazor.UI.Client.Shared.Load>
                
            }
        </div>
    </div>
 
</div>

@code {
    private IEnumerable<ComplexeDto>? complexetab { get; set; }
    private ComplexeDto? SelectComplexe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        complexetab = await comp.Get();
    }
    public void SelectComplexedetails(ComplexeDto complexe)
    {
        SelectComplexe = complexe;
    }
    private void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo($"/details/{id}");
    }
    private void AddComplexe()
    {
        NavigationManager.NavigateTo($"/manager/addComplexe");
    }
    private void AddSalle()
    {
        NavigationManager.NavigateTo($"/manager/addSalle");
    }
    private void AddCatalogue()
    {
        NavigationManager.NavigateTo($"/manager/addCatalogue");
    }
    private void GetSalleByComplexe(int id)
    {
        NavigationManager.NavigateTo($"/manager/sallebycomplexe/{id}");
    }
}
