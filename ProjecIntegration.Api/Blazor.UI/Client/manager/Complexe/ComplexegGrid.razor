@page "/manager/complexe"
@using Blazor.UI.Client.manager.Complexe.Component
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Microsoft.AspNetCore.Components.QuickGrid
@using Blazor.UI.Client.Shared;

@inject IComplexeService comp;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;

<PageTitle>Complexe</PageTitle>
<div class="flex-fill m-4 p-4">

    <h1>Gestion des Complexe</h1>
    <br />
    <div class="container">
          <div class="table-wrapper">
               <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2>Manage <b>Complexe</b></h2>
                        </div>
                        <div class="col-sm-6 btn-group float-end">
                        <a href="#addModale" 
                           class="btn btn-success" data-toggle="modal" 
                            @onclick="() => addDialogOPen()"><i class="material-icons">&#xE147;</i> <span>Add New Complexe</span></a>
                      
                        <a href="#deleteModale"
                           class="btn btn-warning"
                           data-toggle="modal" @onclick="() => Dataload()"><i class="material-icons">&#xE15C;</i> <span>reload</span></a>
                        </div>
                    </div>
                </div>
                <div>

                    @if (complexetab == null)
                    {
                        <Blazor.UI.Client.Shared.Load></Blazor.UI.Client.Shared.Load>
                    }
                    else
                    {
                        <div class="">

                            <QuickGrid Items="@complexetab.AsQueryable()">
                                <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
                                <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
                                <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
                                <TemplateColumn Context="item">
                                    <div>
                                        <button type="button" class="btn btn-primary" @onclick="() =>SelectComplexedetails(item) ">Details</button>
                                    </div>
                                </TemplateColumn>
                            <TemplateColumn Context="item">
                                <div>
                                    <button type="button" class="btn btn-warning" @onclick="() =>UpdateDialogOPen(item.Id)">Update</button>
                                </div>
                            </TemplateColumn>
                            <TemplateColumn Context="item">
                                <div>
                                    <button type="button" class="btn btn-danger" @onclick="() =>DeleteDialogOPen(item.Id) ">Delete</button>
                                </div>
                            </TemplateColumn>
                            </QuickGrid>

                        </div>
                    }
                </div>
        </div>

            <div class="row m-2 p-2">
                <div class="row">
                    <div class="col bg-white  m-4 p-4 w-50 rounded">
                    @if (IsDeleting)
                    {
                        <DeleteComplexe Id="SelectComplexeId" OnClose="DeleteDialogclose"></DeleteComplexe>  
                    }
                    else if (IsAdding)
                    {
                        <AddComplexe OnClose="addDialogclose"></AddComplexe>

                    }
                    else if (IsUpdating)
                    {
                        <UpdateComplexe Id="SelectComplexeId"  OnClose="UpdateDialogclose"></UpdateComplexe>
                    }
                    else if (IsDetails)
                    {
                       <ComplexeDetails Id="SelectComplexeId" OnClose="DetailsDialogclose"></ComplexeDetails>
                        
                    }
                    </div>
                </div>

            </div>
    </div>
</div>
    
    <div id="addModale" class="modal fade">
        <div class="modal-dialog">

        </div>
    </div>
    <div id="delelteModale" class="modal fade">
        <div class="modal-dialog">
        </div>
    </div>
@code {
    private IJSObjectReference module;
    private List<ComplexeDto> complexetab { get; set; }
    private ComplexeDto? SelectComplexe { get; set; } 
    private int SelectComplexeId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await Dataload();
    }
    public async Task Dataload()
    {
        try
        {
            complexetab =( await comp.Get()).ToList();
        }
        catch (Exception)
        {

            complexetab = new List<ComplexeDto>();
        }

    }
    #region selectdata
    public void SelectComplexedetails(ComplexeDto complexe)
    {
        try
        {
            SelectComplexe = complexe;
            SelectComplexeId = SelectComplexe.Id;
            detailsDialogOPen();
        }
        catch (Exception)
        {

            SelectComplexe = new();
            SelectComplexeId = 0;
        }
    }
    #endregion
    #region Page
    private void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo($"/details/{id}");
    }
    private void AddComplexe()
    {
        NavigationManager.NavigateTo($"/manager/addComplexe");
    }
    private void AddSalle()
    {
        NavigationManager.NavigateTo($"/manager/addSalle");
    }
    private void AddCatalogue()
    {
        NavigationManager.NavigateTo($"/manager/addCatalogue");
    }
    private void GetAllCatalogue(int id)
    {
        NavigationManager.NavigateTo($"/manager/catalogue/{id}");
    }
    private void GetSalleByComplexe(int id)
    {
        NavigationManager.NavigateTo($"/manager/sallebycomplexe/{id}");
    }

    #endregion
    #region State
    public bool IsAdding { get; set; }
    public bool IsDeleting { get; set; }
    public bool IsUpdating { get; set; }
    public bool IsDetails { get; set; }

    public bool OpenDialogBox { get; set; } = false;
    private void addDialogOPen()
    {
        IsAdding = true;
        StateHasChanged();
    }
    private void addDialogclose()
    {
        IsAdding = false;
        StateHasChanged();
    }
    private void DeleteDialogOPen(int Id)
    { 
        SelectComplexeId = Id;
        IsDeleting = true;
        StateHasChanged();

    }
    private async Task DeleteDialogclose()
    {
        IsDeleting = false;
        StateHasChanged();
        await Dataload();
    }
    private void UpdateDialogOPen(int Id)
    {
        SelectComplexeId = Id;
        IsUpdating = true;
        StateHasChanged();
    }
    private async Task UpdateDialogclose()
    {
        IsUpdating = false;
        StateHasChanged();
        await Dataload();
    }
    private void detailsDialogOPen()
    {
        IsDetails = true;
        StateHasChanged();
    }
    private void DetailsDialogclose()
    {
        IsDetails = false;
        StateHasChanged();
    }
    #endregion
  
}
