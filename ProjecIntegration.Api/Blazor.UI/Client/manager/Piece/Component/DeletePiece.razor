@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@inject IPieceService pieceService;


<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <a @onclick="()=>ModalCancel()" type="button" class="btn-danger btn m-2"><i class="bi bi-x-circle-fill "></i></a>
            </div>
            <div class="modal-body">
                <p>@Text</p>
                iv class="modal-body">
                @if (SelectedPiece != null)
                {
                    <div class="col">
                        <div>
                            <h4 cclass="form-label" for="titre">Titre:</h4>
                            <p>@SelectedPiece?.Titre</p>
                        </div>

                        <div class="">

                            <h4 class="form-label" for="duree">Duree:</h4>
                            <p>@SelectedPiece?.Duree</p>
                        </div>

                        <div>
                            <h4 c class="form-label" for="description">Description:</h4>
                            <p>@SelectedPiece.Description</p>
                        </div>
                        <div>
                            <h4 cclass="form-label" for="auteur">Auteur :</h4>
                            <p>@SelectedPiece.Auteur</p>
                        </div>


                        <br />
                    </div>
                    <div class="col">
                        <div>
                            <h4 class="form-label" for="File">Photo :</h4>
                            <img class="img-fluid" src="https://localhost:44337/Resources/@SelectedPiece.Image" />
                        </div>
                    </div>
                    <div class="m-2">
                        <a class="btn btn-danger" @onclick="() => Delete()">Delete</a>
                    </div>
                   
                }
                else
                {

                }
            </div>
            <div class="modal-footer">
                <button @onclick="()=>ModalOk()" type="button" class="btn btn-primary"> Ok</button>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }

    public PieceDto SelectedPiece { get; set; }
    protected override async Task OnInitializedAsync()
    {
        SelectedPiece = await pieceService.GetById(Id);
    }
    #region  modale state
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public string Text { get; set; } ="Désirer vous réellement supprimer cette Piece?";
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    #endregion
    public async Task Delete()
    {
        await pieceService.Delete(Id);
        _= ModalOk();
    }
}
