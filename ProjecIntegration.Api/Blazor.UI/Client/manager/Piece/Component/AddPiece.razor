@page "/manager/addPiece"
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.services.TheatherService
@using Microsoft.AspNetCore.Http
@using Microsoft.Net.Http.Headers
@using System.Text.Json
@using Newtonsoft.Json
@inject HttpClient Http;
@inject IPieceService pieceService;
@inject IThemeService themeService;
@inject NavigationManager manager;

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"></h4>
                <a @onclick="()=>ModalCancel()" type="button" class="btn-danger btn m-2"><i class="bi bi-x-circle-fill "></i></a>
            </div>
            <div class="modal-body">
                <div class="flex-fill m-4">
                    <div class="card m-4 p-4">
                        <h3 class="card-title">AddPiece</h3>
                        <div class="card-body">
                            <div class="row">
                                
                                    <form>
                                        <div class="form-group mb-3 w-100">
                                            <div>
                                                <label class="form-label" for="titre">Titre:</label>
                                                <input class="form-control" id="titre" @bind="addedpiece.Titre" />
                                            </div>

                                            <div>
                                                <label class="form-label" for="duree">Duree:</label>
                                                <input class="form-control" id="duree" @bind="addedpiece.Duree" type="number" />
                                            </div>

                                            <div>
                                                <label class="form-label" for="description">Description:</label>
                                                <textarea class="form-control " id="description" @bind="addedpiece.Description" rows="3">
                                </textarea>
                                            </div>
                                            <div>
                                                <label class="form-label" for="auteur">Auteur :</label>
                                                <input class="form-control" id="titre" @bind="addedpiece.Auteur" />
                                            </div>
                                            <div>
                                                <label class="form-label" for="auteur">Theme</label>
                                                <select class="form-control" @oninput="OnselecteThem" @bind="selectTheme">
                                                    <option></option>
                                                    @foreach (var item in Getalltheme)
                                                    {
                                                        <option value="@item.Id"> @item.Libelle</option>
                                                    }
                                                </select>
                                            </div>
                                            <div>
                                                <label class="form-label" for="File">Photo :</label>
                                                <InputFile class="col-form-label-lg " OnChange="@OnFileSelected" />
                                                <div>
                                                    <button type="button" class="btn btn-warning" @onclick="UploadImage"> Upload Image</button>
                                                </div>
                                            </div>
                                            <div>
                                            </div>
                                            <br />
                                            <div>
                                                <button class="btn-primary" type="btn" @onclick="() => AddPieceToDatabase(addedpiece)">ajouter</button>
                                            </div>

                                        </div>
                                    </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="()=>ModalOk()" type="button" class="btn btn-primary"> Ok</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private long maxFileSize = long.MaxValue;
    public string? fileName { get; set; }
    IBrowserFile? ImageFile { get; set; }
    public ImageDto ImageValue { get; set; } = new();
    public List<ThemeDto> Getalltheme { get; set; } = new();
    public int selectTheme { get; set; }

    public AddPieceDto addedpiece { get; set; } = new AddPieceDto();
    protected override async Task OnInitializedAsync()
    {
        addedpiece = new AddPieceDto();
        Getalltheme = (await themeService.GetAllTheme()).ToList(); 
        await Task.Delay(1000);
    }
    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        ImageFile =e.File;

    }
    public void AddPieceToDatabase(AddPieceDto PieceToAdd)
    {


        PieceToAdd.ImageId = ImageValue.Id;
        PieceToAdd.ThemeId = selectTheme;
        pieceService.Create(PieceToAdd);
        _ = ModalOk();

    }

    public void OnselecteThem(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
           selectTheme = selectedId;
        }
    }

    public async Task UploadImage()
    {
        using var content = new MultipartFormDataContent();

        var file = ImageFile;
        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

        fileName=file.Name;

        content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: file.Name);


        var response = await Http.PostAsync("/api/File", content);
        if (response.IsSuccessStatusCode)
        {
            var ImgContent = await response.Content.ReadAsStringAsync();
            ImageValue = JsonConvert.DeserializeObject<ImageDto>(ImgContent);
            
        }
    }
    #region  modale state
   
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    #endregion
}