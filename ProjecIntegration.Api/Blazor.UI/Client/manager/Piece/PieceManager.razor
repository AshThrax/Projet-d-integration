@page "/manager/Piece"

@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager manager;
@inject IPieceService PieceService;

<div class="flex-fill m-4 p-4">

    <h3>PieceManager</h3>
    <h4> Piece </h4>

   <div class="table-wrapper">
        <div class="col-sm-6 float-end btn-group">
                <a class="btn btn-success"
                   @onclick="() => addDialogOPen()"><i class="material-icons">&#xE147;</i> <span>Add Piece </span></a>
          
                <a class="btn btn-warning" @onclick="() =>DataLoad()">Reload</a>
           
        </div>
        <br />
        <div class="jumbotron m-4 p-4">
            <div class="row">
                <div class="col bg-white m-4 p-4 w-50 rounded" >
                  <QuickGrid Items="@GetPiece?.AsQueryable()">
                    <PropertyColumn Property="@(p => p.Id)" Sortable="true"/>
                    <PropertyColumn Property="@(p =>p.Titre)" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Auteur)" Sortable="true" />
                    <PropertyColumn Property="@(p =>p.Description)" Sortable="true" />
                    <PropertyColumn Property="@(p =>p.AddedTime)" Sortable="true" />
                        <TemplateColumn>
                            <div class="btn-group">
                                <a @onclick="() =>detailsDialogOPen(context.Id)"
                                   class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top"
                                   data-bs-custom-class="custom-tooltip"
                                   data-bs-title="Add"> <i class="bi bi-plus-square"></i> Add</a>
                                <a @onclick="() => UpdateDialogOPen(context.Id)"
                                   class="btn btn-warning"
                                   data-bs-toggle="tooltip"
                                   data-bs-placement="top"
                                   data-bs-custom-class="custom-tooltip"
                                   data-bs-title="Update"> <i class="bi bi-pencil"></i> update</a>
                                <a @onclick="() => DeleteDialogOPen (context.Id)"
                                   class="btn btn-danger"
                                   data-bs-toggle="tooltip"
                                   data-bs-placement="top"
                                   data-bs-custom-class="custom-tooltip"
                                   data-bs-title="Delete"> <i class="bi bi-x-square"></i>delete</a>
                            </div>
                        </TemplateColumn>
                </QuickGrid>
                </div>
                <br />
                <br />
                <div class="row m-2 p-2 w-25 bg-white rounded">
                   
                        @if (IsAdding)
                        {
                            <Blazor.UI.Client.manager.Piece.Component.AddPiece OnClose="addDialogclose"></Blazor.UI.Client.manager.Piece.Component.AddPiece>
                        }
                        else if (IsDeleting)
                        {
                            <Blazor.UI.Client.manager.Piece.Component.DeletePiece Id="@SelectedPieceId" OnClose="DeleteDialogclose"></Blazor.UI.Client.manager.Piece.Component.DeletePiece>
                        }
                        else if (IsDetails)
                        {
                            <Blazor.UI.Client.manager.Piece.Component.PieceDetails Id="@SelectedPieceId" OnClose="DetailsDialogclose"></Blazor.UI.Client.manager.Piece.Component.PieceDetails>
                        }
                        else if (IsUpdating)
                        {
                            <UpdatePiece Id="SelectedPieceId" OnClose="UpdateDialogclose"></UpdatePiece>
                        }
                        else
                        {
                        
                        }
                </div>
            </div>
        </div>
   </div> 
</div>
@code {
    public IEnumerable<PieceDto>?  GetPiece { get; set; }
    public PieceDto? SelectedPiece { get; set; }
    public int SelectedPieceId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await DataLoad();
    }
    public async Task DataLoad()
    {
        GetPiece = await PieceService.Getlist();

    }

    #region page
    public void GetRepresentation(int id)
    {
        manager.NavigateTo($"/manager/representationPiece/{id}");
    }
    public void AddRepresentation(int pieceId)
    {
        manager.NavigateTo($"/manager/addrepresentation");
    }
    public void GetAllPiece()
    {
        manager.NavigateTo("/manager/piece");
    }
    public void GetHome()
    {
        manager.NavigateTo("/");
    }
    public void Previous()
    {
        manager.NavigateTo("/manager");
    }
    public void UpdatePiece(int pieceId)
    {
        manager.NavigateTo($"/manager/updatePiece/{pieceId}");
    }
    #endregion
    #region Callback
    public bool IsAdding { get; set; }
    public bool IsDeleting { get; set; }
    public bool IsUpdating { get; set; }
    public bool IsDetails { get; set; }

    public bool OpenDialogBox { get; set; } = false;
    private void addDialogOPen()
    {
        IsAdding = true;
        StateHasChanged();
    }
    private async Task addDialogclose()
    {
        IsAdding = false;
        StateHasChanged();
        await DataLoad();
    }
    private void DeleteDialogOPen(int Id)
    {
        SelectedPieceId = Id;
        IsDeleting = true;
        StateHasChanged();
    }
    private async Task DeleteDialogclose()
    {
        IsDeleting = false;
        StateHasChanged();
        await DataLoad();
    }
    private void UpdateDialogOPen(int Id)
    {
        SelectedPieceId = Id;
        IsUpdating = true;
        StateHasChanged();
    }
    private async Task UpdateDialogclose()
    {
        IsUpdating = false;
        StateHasChanged();
        await DataLoad();
    }
    private void detailsDialogOPen(int Id)
    {
        SelectedPieceId = Id;
        IsDetails = true;
       
        StateHasChanged();

    }
    private void DetailsDialogclose()
    {
        IsDetails = false;
        StateHasChanged();
    }
    #endregion
    public async Task DeletePiece(PieceDto pieceDto)
    {
        await PieceService.Delete(pieceDto.Id);
        GetPiece = await PieceService.Getlist();
    }
}
