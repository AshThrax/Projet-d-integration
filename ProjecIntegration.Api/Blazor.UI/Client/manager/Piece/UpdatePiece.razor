@page "/manager/updatePiece/{Id:int}"
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.Services.User
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.services.TheatherService
@using Newtonsoft.Json
@inject HttpClient Http;
@inject IPieceService pieceService;
@inject IThemeService themeService;
@inject IFileService fileService;
@inject NavigationManager manager;


<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <a @onclick="()=>ModalCancel()" type="button" class="btn-danger">&times;</a>
            </div>
            <div class="modal-body">
                <div class="flex-fill m-4 p-4">
                    <h3>UpdatePiece</h3>
                   
                    <div>
                        @if (GetPiece != null)
                        {
                            <p>hello there </p>
                            <form>
                                <div class="form-group mb-3 w-50">
                                    <div>
                                        <label class="form-label" for="titre">Titre:</label>
                                        <input class="form-control" id="titre" @bind="GetPiece.Titre" />
                                    </div>

                                    <div>
                                        <label class="form-label" for="duree">Duree:</label>
                                        <input class="form-control" id="duree" @bind="GetPiece.Duree" type="number" />
                                    </div>

                                    <div>
                                        <label class="form-label" for="description">Description:</label>
                                        <textarea class="form-control " id="description" @bind="GetPiece.Description" rows="3">
                            </textarea>
                                    </div>
                                    <div>
                                        <label class="form-label" for="auteur">Auteur :</label>
                                        <input class="form-control" id="titre" @bind="GetPiece.Auteur" />
                                    </div>
                                    <div>
                                        <label class="form-label" for="auteur">Theme</label>
                                        <select class="form-control" @oninput="OnselecteThem" @bind="selectTheme">
                                            <option></option>
                                            @foreach (var item in Getalltheme)
                                            {
                                                <option value="@item.Id"> @item.Libelle</option>
                                            }
                                        </select>
                                    </div>
                                    <div>
                                        <label class="form-label" for="File">Photo :</label>
                                        <InputFile class="col-form-label-lg " OnChange="@OnFileSelected" />
                                        <a class="btn btn-sucess" @onclick="()=>UploadImage()">Upload Image</a>
                                    </div>
                                    <div>
                                    </div>
                                    <br />
                                    <div>
                                        <button class="btn-primary btn" type="btn" @onclick="() => UpdatedPiece()">mettre a jour</button>
                                    </div>

                                </div>
                            </form>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="()=>ModalOk()" type="button" class="btn btn-primary"> Ok</button>
            </div>
        </div>
    </div>
</div>
@code {
        [Parameter]
        public int Id { get; set; }
    public PieceDto GetPiece { get; set; }

    private long maxFileSize = long.MaxValue;
    public string? fileName { get; set; }
    IBrowserFile? ImageFile { get; set; }
    public ImageDto ImageValue { get; set; } 
    public List<ThemeDto> Getalltheme { get; set; } = new();
    public int selectTheme { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetPiece = await pieceService.GetById(Id);
        Getalltheme = (await themeService.GetAllTheme()).ToList();

    }

    public async Task UpdatedPiece()
    {
       
        UpdatePieceDto piece = new UpdatePieceDto
            {
                Titre = GetPiece.Titre,
                Auteur = GetPiece.Auteur,
                Description = GetPiece.Description,
                Duree = GetPiece.Duree,
                Id = GetPiece.Id,
                Image = ImageValue?.ImageRessource,
                ThemeId = GetPiece.ThemeId
            };
        await pieceService.Update(piece.Id, piece);
        _ = ModalOk();
    }
    #region page
    private void GetAllPiece(MouseEventArgs e)
    {
        manager.NavigateTo("/manager/piece");
    }
    private Task GetHome(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
    private void Previous(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
    public void OnselecteThem(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            selectTheme = selectedId;
        }
    }
    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        ImageFile = e.File;

    }
    public async Task UploadImage()
    {
        using var content = new MultipartFormDataContent();

        var file = ImageFile;
        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

        fileName = file.Name;

        content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: file.Name);

        int imageId = GetPiece.ImageId;
        var response = await Http.PutAsync($"/api/File/{imageId}", content);
        if (response.IsSuccessStatusCode)
        {
            var ImgContent = await response.Content.ReadAsStringAsync();
            ImageValue = JsonConvert.DeserializeObject
                            <ImageDto>(ImgContent);

        }

    }
    #endregion
    #region  modale state
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public string Text { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    #endregion
}
