@page "/manager/sallebycomplexe/{Id:int}"
@page "/manager/sallebycomplexe"
@using Blazor.UI.Client.manager.Salle.Component
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.ServiceResult
@using Blazor.UI.Data.services.TheatherService
@using Microsoft.AspNetCore.Components.QuickGrid

@inject NavigationManager manager;
@inject IComplexeService ComplexesService;
@inject ISalleService SalleService;

<h3>Gestion des Salle</h3>
<div class="flex-fill m-4 p-4">
    <br />
    <div class="">
        <h3>Complexe </h3>
        <select class="form-control w-25" @bind="SelectComplexeId" @oninput="OnSelectedChange">
            <option>choissisez le complexe </option>
            @foreach (ComplexeDto item in GetComplexes)
            {
                <option value="@item.Id">@item.Name <p>@item.Id</p></option>
            }
        </select>
        <div class="mt-2 btn-group float-end">
        <a href="#addModale"
           class="btn btn-success" data-toggle="modal"
           @onclick="() => addDialogOPen()"><i class="material-icons">&#xE147;</i> <span>Add New Salle</span></a>
        <a href="#deleteModale"
           class="btn btn-danger"
               data-toggle="modal" @onclick="() =>DeleteDialogOPen()"><i class="material-icons">&#xE15C;</i> <span>Delete</span></a>
            <a href="#deleteModale"
               class="btn btn-warning"
               data-toggle="modal" @onclick="() => DataLoad()"><i class="material-icons">&#xE15C;</i> <span>Reload</span></a>
       
    </div>
    <br />
    @if (SelectedComplexe != null && GetComplexes != null)
    {
            <div class="table-wrapper">
                <div class="m-2 p-2">
                    <div class="row ">
                        <div class="col-sm-3">  
                            @if (SelectedComplexe != null)
                            {
                                <div class="card">
                                    <h4 class="form-label">Nom:</h4>
                                    <p>@SelectedComplexe?.Name</p>

                                    <h4 class="form-label">Description:</h4>
                                    <p>@SelectedComplexe?.Description</p>

                                    <h4 class="form-label">Address:</h4>
                                    <p>@SelectedComplexe?.Adress</p>

                                    <h4 class="form-label" for="address">Address:</h4>
                                    <p>@SelectedComplexe?.AddedTime</p>
                              
                                </div>
                            }
                            else
                            {
                                
                            }
                        </div>
                        <div class="col"></div>
                        <div class="col-sm-6">
                        <h3 class="card-header text-center">Salle du complexe</h3>
                                @if ( GetSallePagination != null)
                                {
                                <QuickGrid Items="@GetSallePagination.Items.AsQueryable()">
                                        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
                                        <PropertyColumn Property="@(p =>p.Name)" Sortable="true" />

                                        <PropertyColumn Property="@(p => p.PlaceMax)" Sortable="true" />
                                        <TemplateColumn>
                                            <div class="btn-group">
                                                <a @onclick="() =>DetailsDialogOPen(context)"
                                                   class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top"
                                                   data-bs-custom-class="custom-tooltip"
                                                   data-bs-title="Add"> <i class="bi bi-plus-square"></i> Add</a>
                                                <a @onclick="() => UpdateDialogOPen(context)"
                                                   class="btn btn-warning"
                                                   data-bs-toggle="tooltip"
                                                   data-bs-placement="top"
                                                   data-bs-custom-class="custom-tooltip"
                                                   data-bs-title="Update"> <i class="bi bi-pencil"></i> update</a>
                                                <a @onclick="() => DeleteDialogOPen()"
                                                   class="btn btn-danger"
                                                   data-bs-toggle="tooltip"
                                                   data-bs-placement="top"
                                                   data-bs-custom-class="custom-tooltip"
                                                   data-bs-title="Delete"> <i class="bi bi-x-square"></i>delete</a>
                                            </div>
                                        </TemplateColumn>
                                    </QuickGrid>
                                <div class="row m-2 p-2">
                                    <div class="col-sm-3"></div>
                                    <div class="col-sm-3"></div>

                                    <div class="col-sm-6 btn-group m-2 p-2">
                                        <a class="btn btn-outline-dark btn-light" @onclick="PreviousPage">Previous</a>
                                        <a class="btn btn-outline-dark btn-light" @onclick="NextPage">Next</a>
                                    </div>
                                </div>
                                }
                                else
                                {
                                }
                        </div>
                    </div>
                 <div class="">
                        <div class="col bg-white  m-4 p-4 w-50 rounded">
                        @if (IsDeleting)
                        {
                            <DeleteSalle Id="selectedSalleId" OnClose="DeleteDialogclose"></DeleteSalle>
                        }
                        else if (IsAdding)
                        {
                      
                            <AddSallByComplexe OnClose="addDialogclose"></AddSallByComplexe>
                        }
                        else if (IsUpdating)
                        {
                            <UpdateSalle Id="selectedSalleId" OnClose="UpdateDialogclose" ></UpdateSalle>
                        }
                        else if (IsDetails)
                        {
                           
                           <DetailsSalle Id="selectedSalleId" OnClose="DetailsDialogclose"></DetailsSalle>
                        }
                        </div>
                    </div>

            </div>
        </div>
    }
    else
    {
       <Blazor.UI.Client.Shared.Load></Blazor.UI.Client.Shared.Load>
    }
</div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }
    public List<ComplexeDto> GetComplexes { get; set; } = new();
    public ComplexeDto SelectedComplexe { get; set; } = new();
    public int SelectComplexeId { get; set; }

    public List<SalleDeTheatreDto>? GetSalles { get; set; }
    public Pagination<SalleDeTheatreDto> GetSallePagination { get; set; }
    public SalleDeTheatreDto? SelectedSalleDeTheatre { get; set; } 
    public int selectedSalleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SelectComplexeId = Id;
        await DataLoad();
    }
    public async Task DataLoad()
    {

        GetComplexes = (await ComplexesService.Get()).ToList();
        SelectedComplexe = await ComplexesService.GetById(SelectComplexeId);
        GetSalles = SelectedComplexe?.SalleDeTheatres;
        pageIndexe=1;
        GetSallePagination = await SalleService.Get(SelectComplexeId, pageIndexe);
    }
    public void SelectSalle(SalleDeTheatreDto salleDeTheatreDto)
    {
        try
        {
            SelectedSalleDeTheatre = salleDeTheatreDto;
            selectedSalleId = SelectedSalleDeTheatre.Id;

        }
        catch (Exception)
        {
            SelectedSalleDeTheatre = new();

        }
    }
    public async Task OnSelectedChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {


        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelectComplexeId = selectedId;
        }
        try
        {
            SelectedComplexe = await ComplexesService.GetById(SelectComplexeId);
            if (SelectedComplexe.SalleDeTheatres?.Count >= 0)
            {
                await DataLoad();
            }
            else
            {
                GetSalles = new List<SalleDeTheatreDto>();   
            }

        }
        catch (Exception)
        {

            SelectedComplexe = new();
        }
    }
    #region Page
    private void AddSalle()
    {
        manager.NavigateTo("/manager/addSalle");
    }
    private void UpdateSalle(int Id)
    {
        manager.NavigateTo($"/manager/updateSalle/{Id}");
    }
    public void siegeManager(int salleId)
    {
        manager.NavigateTo($"/manager/siege/{salleId}");   
    }
    #endregion
    #region State
    //state----
    public bool IsAdding { get; set; }
    public bool IsDeleting { get; set; }
    public bool IsUpdating { get; set; }
    public bool IsDetails { get; set; }

    public bool OpenDialogBox { get; set; } = false;
    private void addDialogOPen()
    {
        IsAdding = true;
        StateHasChanged();
    }
    private async Task addDialogclose()
    {
        IsAdding = false;
        StateHasChanged();
        await DataLoad();
    }
    private void DeleteDialogOPen()
    {
        IsDeleting = true;
        StateHasChanged();
    }
    private void DeleteDialogclose()
    {
        IsDeleting = false;
        StateHasChanged();
    }
    private void UpdateDialogOPen(SalleDeTheatreDto item)
    {
        IsUpdating = true;
        StateHasChanged();
        SelectSalle(item);
    }
    private async Task UpdateDialogclose()
    {
        IsUpdating = false;
        StateHasChanged();
        await DataLoad();
    }
    private void DetailsDialogOPen(SalleDeTheatreDto item)
    {
        IsDetails = true;
        StateHasChanged();
        SelectSalle(item);
    }
    private void DetailsDialogclose()
    {
        IsDetails = false;
        StateHasChanged();
    }
    #endregion
    #region pagination
    public int pageIndexe {get;set;}=1;
    public async Task NextPage()
    {
        if (GetSallePagination.HasNextPage)
        {
            pageIndexe++;
            GetSallePagination = await SalleService.Get(Id, pageIndexe);
        }

    }
    public async Task PreviousPage()
    {
        if (GetSallePagination.HasPreviousPage)
        {
            pageIndexe--;
            GetSallePagination = await SalleService.Get(Id, pageIndexe);
        }
    }
    #endregion
}
