@page "/manager/catalogue/{Id:int}"
@page "/manager/catalogue"
@using Blazor.UI.Data.ServiceResult
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IComplexeService ComplexeService;
@inject ICatalogueService CatalogueService;
@inject IPieceService PieceService;
@inject NavigationManager manager;

<div class="flex-fill m-4 p-4">

    <div class="jumbotron bg-white w-25  rounded">
        <h1 class="">Gestion des Catalogue</h1>

    </div>
    <div class="p-2">
        <div class="w-25">
            @if (GetComplexe != null)
            {
            <select class="form-control" @bind="SelectedComplexeId" @oninput="OnSelectedChange">
                <option value="value">choose Complexe</option>
                @foreach (var item in GetComplexe)
                {
                    <option value="@item.Id">@item.Name</option>

                }
            </select>
                
            }
        </div>
      
    </div>
    <div class="row w-50">
        @if (GetCatalogue != null)
        {

           <div class="col">
                <div class="">
                   <h3 class="table-wrapper">Manage catalogues</h3>
                    <div class="table-title">
                            <div class="btn-group-sm float-end ">
                                <a type="button"
                                   class="btn btn-success"
                                   @onclick="() =>addDialogOPen()">
                                    Ajouter un catalogue
                                </a>
                                <a type="button"
                                   class="btn btn-warning"
                                   @onclick="() =>UpdateDialogOPen()">
                                    Update
                                </a>
                                <a type="button"
                                   class="btn btn-danger"
                                   @onclick="() =>DeleteDialogOPen()">
                                    Delete
                                </a>
                            </div>
                   </div>
                   <div class="">
                        <QuickGrid Items="GetCatalogue.AsQueryable()" >
                                <PropertyColumn Property="p =>p.Name" Sortable="true"/>
                                <PropertyColumn Property="p =>p.Description" Sortable="true" />
                                <PropertyColumn Property="p =>p.AddedTime" Sortable="true" />
                                <TemplateColumn Context="item">
                                    <button type="button" class="btn btn-warning" @onclick="() => SelecteCatalogue(item)">details</button>
                                </TemplateColumn>
                            <TemplateColumn Context="item">
                                <button type="button" class="btn btn-warning" @onclick="() => GetToPieceCatalog(item.Id)">Piece</button>
                            </TemplateColumn>
                        </QuickGrid>

                   </div>
               </div>
            </div>
      
        }
        else
        {
           <Blazor.UI.Client.Shared.Load></Blazor.UI.Client.Shared.Load>    
        }
    </div>
    <br />
    
    @if(IsDetails)
    {
        <Blazor.UI.Client.manager.Catalogue.Component.detailsCatalogue Id="SelectedCatalogueId" OnClose="DetailsDialogclose"></Blazor.UI.Client.manager.Catalogue.Component.detailsCatalogue>
    }
    else if(IsAdding)
    {
        <Blazor.UI.Client.manager.Catalogue.Component.AddCatalogue OnClose="addDialogclose"></Blazor.UI.Client.manager.Catalogue.Component.AddCatalogue>
    }
    else if (IsAddingPiece)
    {
        <Blazor.UI.Client.manager.Piece.AddPieceToCatalogue Id="SelectedCatalogueId" OnClose="addPieceDialogclose"></Blazor.UI.Client.manager.Piece.AddPieceToCatalogue>
    }
    else if (IsDeleting)
    {
        <Blazor.UI.Client.manager.Catalogue.Component.DeleteCatalogue Id="SelectedCatalogueId" OnClose="DeleteDialogclose"></Blazor.UI.Client.manager.Catalogue.Component.DeleteCatalogue>
    }
    else if (IsUpdating)
    {
        <Blazor.UI.Client.manager.Catalogue.Component.UpdateCatalogue Id="SelectedCatalogueId" OnClose="UpdateDialogclose"></Blazor.UI.Client.manager.Catalogue.Component.UpdateCatalogue>
    }
    else if (IsdeletingPiece)
    {
      <Blazor.UI.Client.manager.Piece.RemovePieceFromCatalogue Id="SelectedCatalogueId" OnClose="DeletePieceDialogclose"></Blazor.UI.Client.manager.Piece.RemovePieceFromCatalogue>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    List<ComplexeDto>? GetComplexe { get; set; } 
    ComplexeDto? SelectedComplexe { get; set; } 
    public int SelectedComplexeId { get; set; }

    List<CatalogueDto>? GetCatalogue { get; set; }
    CatalogueDto? SelectedCatalogue { get; set; } 
    public int SelectedCatalogueId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await DataLoad();
    }
    public async Task DataLoad()
    {
        SelectedComplexeId = Id;
        GetComplexe = (await ComplexeService.Get()).ToList();
        GetCatalogue = (await CatalogueService.GetAllCatalogueByComplexeId(SelectedComplexeId)).ToList();
        await Task.Delay(1000);
        
    }
    #region selectData
    public void SelecteCatalogue(CatalogueDto selected)
    {
        SelectedCatalogue = selected;
        SelectedCatalogueId = SelectedCatalogue.Id;
        detailsDialogOPen();
    }
    public void SelecteCataloguePiece(CatalogueDto selected)
    {
        SelectedCatalogue = selected;
        SelectedCatalogueId = SelectedCatalogue.Id;
        addPieceDialogOPen();
    }
    public async Task OnSelectedChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {

        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelectedComplexeId = selectedId;
        }

        await LoadCatalogue(SelectedComplexeId);
    }
    public async Task LoadCatalogue(int selectedid)
    {
        GetCatalogue = (await CatalogueService.GetAllCatalogueByComplexeId(SelectedComplexeId)).ToList();
        await Task.Delay(1000);
    }
    #endregion
    #region page 
    public void GetToAddCatalog()
    {
        manager.NavigateTo("/manager/addcatalogue");
    }
    public void GetToUpdateCatalog(int catalogueId)
    {
        manager.NavigateTo($"/manager/updatecatalogue/{catalogueId}");
    }
    public void GetToDeleteCatalog(int catalogueId)
    {
        manager.NavigateTo($"/manager/Deletecatalogue/{catalogueId}");
    }
    public void GetToPieceCatalog(int catalogueId)
    {
        manager.NavigateTo($"/manager/cataloguePiece/{catalogueId}");
    }
    #endregion
    #region State
    public bool IsAdding { get; set; }
    public bool IsAddingPiece { get; set; }
    public bool IsDeleting { get; set; }
    public bool IsdeletingPiece { get; set; }
    public bool IsUpdating { get; set; }
    public bool IsDetails { get; set; }

    public bool OpenDialogBox { get; set; } = false;
    private void addDialogOPen()
    {
        IsAdding = true;
        StateHasChanged();
    }
    private void addDialogclose()
    {
        IsAdding = false;
        StateHasChanged();
    }
    private void addPieceDialogOPen()
    {
        IsAddingPiece = true;
        StateHasChanged();
    }
    private void addPieceDialogclose()
    {
        IsAddingPiece = false;
        StateHasChanged();
    }
    private void DeleteDialogOPen()
    {
        IsDeleting = true;
        StateHasChanged();
    }
    private void DeleteDialogclose()
    {
        IsDeleting = false;
        StateHasChanged();
    }
    private void DeletePieceDialogOPen()
    {
        IsdeletingPiece = true;
        StateHasChanged();
    }
    private void DeletePieceDialogclose()
    {
        IsdeletingPiece = false;
        StateHasChanged();
    }
    private void UpdateDialogOPen()
    {
        IsUpdating = true;
        StateHasChanged();
    }
    private void UpdateDialogclose()
    {
        IsUpdating = false;
        StateHasChanged();
    }
    private void detailsDialogOPen()
    {
        IsDetails = true;
        StateHasChanged();
    }
    private void DetailsDialogclose()
    {
        IsDetails = false;
        StateHasChanged();
    }
#endregion
}
