@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService


@inject IComplexeService ComplexeService;
@inject ICatalogueService CatalogeService;



<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <a @onclick="()=>ModalCancel()" type="button" class="btn-danger"><i class="bi bi-x-circle-fill "></i></a>
            </div>
            <div class="modal-body">
                <div class="flex-fill m-4">
                    <div class="row">

                        <div class="card m-2">
                            <form class="">
                                <h3 class="card-header"> Ajouter un catalogue </h3>
                                <div class="form-group mb-3 card-body ">

                                    <div>
                                        <label class="form-label" for="name">Name :</label>
                                        <input class="form-control " id="name" @bind-value="@selectCatalogue.Name" />
                                    </div>
                                    <div>
                                        <label class="form-label" for="description">Description : </label>
                                        <textarea class="form-control" id="description" @bind="selectCatalogue.Description" rows="3">
                        </textarea>
                                    </div>
                                    <div>
                                        <label class="form-label" for="complexe">Complexe</label>
                                        <select class="form-control" @bind="SelectedComplexeId" @oninput="OnSelectedChange">
                                            <option value="value">text</option>
                                            @if (GetAllComplexe != null)
                                            {
                                                @foreach (var item in GetAllComplexe)
                                                {
                                                    <option value="@item.Id">@item.Name</option>

                                                }
                                                
                                            }
                                        </select>
                                    </div>

                                    <div class="p-2">
                                        <button type="submit" class="btn btn-warning btn" @onclick="() => AddNewCatalogue()">Ajouter le catalogue </button>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="col">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="()=>ModalOk()" type="button" class="btn btn-primary"> Ok</button>
            </div>
        </div>
    </div>
</div>
@code {
    public CatalogueDto selectCatalogue { get; set; } = new();

    public List<ComplexeDto> GetAllComplexe { get; set; }
    public int SelectedComplexeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetAllComplexe = (await ComplexeService.Get()).ToList();
    }
    #region selectdata
    public void OnSelectedChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {

        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelectedComplexeId = selectedId;
        }
    }
    public async Task AddNewCatalogue()
    {
        selectCatalogue.ComplexeId = SelectedComplexeId;
        await CatalogeService.AddCatalogue(selectCatalogue);
        _ = ModalOk();
    }
    #endregion
    #region  modale state
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public string Text { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    #endregion
}
