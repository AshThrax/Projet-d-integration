@page "/manager/addrepresentation"
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@inject IRepresentationService Servrep;
@inject ISalleService ServSalle;
@inject IPieceService ServPiece;

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <a @onclick="()=>ModalCancel()" type="button" class="btn-danger btn m-2"><i class="bi bi-x-circle-fill"></i></a>
            </div>
            <div class="modal-body">
                @if (selectSalle != null && SelectPiece != null)
                {

                    <form class="card form text-md-start">
                        <div class="form-group card-body">
                            <div>
                                <label class="form-label" for="prix">Prix:</label>
                                <input class="form-control" id="prix" @bind="Price" type="number" step="0.01" />
                            </div>
                            <div>
                                <!-- manage the date -->
                                <label class="form-label" for="seance">Seance:</label>
                                <input class="form-control" id="seance" @bind="Date" type="datetime-local" />

                            </div>
                            <div>
                                <label class="form-label" for="idSalleDeTheatre">Salle De Theatre </label>

                                <select class="form-control" @bind="SelectSalleId" @oninput="selectionSalle">
                                    <option>Choisissez une Salle</option>
                                    @foreach (var item in selectSalle)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="form-label" for="idPiece">Piece</label>

                                <div>
                                    <select class="form-control" @bind="SelectPieceID" @oninput="selectionPiece">
                                        <option>Choisissez une Piece</option>
                                        @foreach (var item in SelectPiece)
                                        {
                                            <option value="@item.Id">@item.Titre.ToString()</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="p-4 m-4">
                                <button class="btn btn-outline-dark" @onclick="() =>AddRepresentation()">Add Representation</button>
                            </div>
                        </div>
                    </form>
                }
                else { }
            </div>
            <div class="modal-footer">
                <button @onclick="()=>ModalOk()" type="button" class="btn btn-primary"> Ok</button>
            </div>
        </div>
    </div>
</div>
@code {
    public IEnumerable<PieceDto> SelectPiece { get; set; }
    public IEnumerable<SalleDeTheatreDto> selectSalle { get; set; }
    public int SelectPieceID { get; set; }
    public int SelectSalleId { get; set; }
    //-------heure
    public DateTime Date { get; set; } = DateTime.Now;
    public int heure { get; set; }
    public int minute { get; set; }
    public int Price { get; set; }
    public SalleDeTheatreDto salle { get; set; } = new();
    public PieceDto piece {get;set;}
    //-------enti
    public AddRepresentationDto representation { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        SelectPiece = await ServPiece.Getlist();
        selectSalle = await ServSalle.Getlist();
    }
    private async Task AddRepresentation()
    {
        representation.Seance = Date;
        representation.Prix = Price;
        representation.PlaceCurrent = salle.PlaceMax;
        representation.PlaceMaximum = salle.PlaceMax;
        representation.SalledeTheatreId = salle.Id;
        representation.PieceId = piece.Id;
        await Servrep.Create(representation);
        _ = ModalOk();
    }
    public async Task selectionPiece(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelectPieceID = selectedId;
            piece = await ServPiece.GetById(selectedId);
            representation.PieceId = piece.Id;
        }
    }
    public async Task selectionSalle(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelectSalleId = selectedId;
            salle = await ServSalle.GetById(selectedId);
            representation.SalledeTheatreId = salle.Id;
        }
    }
    #region  modale state
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public string Text { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    #endregion
}