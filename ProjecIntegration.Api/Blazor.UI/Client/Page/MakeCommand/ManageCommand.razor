@page "/makecommand/{IdPiece:int}/{IdSalle:int}/{IdRepresnetation:int}"
@using Microsoft.AspNetCore.Components.QuickGrid;
@using Blazor.UI.Data.modelViews.Theater;
@using Blazor.UI.Data.services.TheatherService;
@inject IPieceService ServPiece;
@inject ISalleService ServSalle;
@inject IRepresentationService Servrep;
@inject ICommandService ServCommande;

@inject Microsoft.AspNetCore.Components.NavigationManager manager
<div class="jumbotron m-2 p-2 bg-light text-lg-center">
    <div class="m-2 p-2">
        <h3 class="display-3 ">Finalisation de la commande de Commande</h3>

    </div>
</div>
<div class=" btn-group rounded float-end">
    <div class="col"></div>
    <div class="col"></div>
    <div class="col"></div>
    <button type="button" class="col col-sm-3  btn btn-primary" @onclick="getProfile">back to profile page</button>
    <button type="button" class="col col-sm-3   btn btn-warning" @onclick="getHome">backMaineMenu</button>
    <button type="button" class="col col-sm-3   btn btn-warning" @onclick="getPrevious">back to reservation</button>
</div>
@if (piececlt != null && repclt != null && salleclt != null)
{  
<div class="row">
    <div class="col bg-light m-2 p-2 rounded">
        <div class="p-2 m-2">
            <div>
                <h3>Résumer de la commande </h3>
            </div>
            <div class="p-3 m-3 bg-primary bg-opacity-10 rounded-5">
                <div class="bg-light m-2 p-4 rounded-5 border">
                    <div class="card">
                         <div class="card-header">
                             <p><strong>titre</strong>: @piececlt.Titre</p>
                                <p><strong>durée de la pîece</strong>: @piececlt.Duree minutes</p>
                         </div>
                         <div class="card-body">

                            <div>
                                 <p><strong>Salle:</strong> @salleclt.Name</p>
                            </div>
                            <div>
                                    <p><strong>séance:</strong> @repclt.Seance </p>
                            </div>
                   
                            <div class="p-2 input-group m-3">
                                <p class="pe-2"><strong>nombre de ticket</strong></p>
                                <br>
                                <input @oninput="UpdatePrice" class="form-control p-2 ps-2 border border-dark" type="number" />
                            </div>
                         </div>
                         <div class="card-footer">
                            <div>
                                <h3>Prix</h3>
                                <div>
                                    <p>@Priceclt</p>
                                </div>
                            </div>
                            <div>
                               <button type="button" class="btn btn-warning p-2 float-end" @onclick="MakingCommande">
                                        nombre de ticket désirée
                              </button>
                            </div>
                         </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
       <div class="col flex-column">
            @if (commandeMade != null)
            {

                <div class ="bg-info bg-opacity-10 m-2 p-2 rounded">
                    <div class="m-2 p-2 bg-light">
                        <h4>Commande</h4>
                        <p>Auth: @commandeMade.AuthId</p>
                        <p>represnetaiton: @commandeMade.IdRepresentation</p>
                        <p>nombre de place:@commandeMade.NombreDePlace</p>
                    </div>
                </div>
               
            }
    </div>
   
</div>
}
else{
    <Blazor.UI.Client.Shared.Load loadParam="en attent de chargement"></Blazor.UI.Client.Shared.Load>
}
@code {
    [Parameter]
    public int IdPiece { get; set; }
    [Parameter]
    public int IdSalle { get; set; }
    [Parameter]
    public int IdRepresnetation { get; set;}


    public int Priceclt { get; set; } = 0;

    public PieceDto piececlt { get; set; }
    public SalleDeTheatreDto? salleclt { get; set; }
    public RepresentationDto? repclt{ get; set; }
    public AddCommandDto commandeMade { get; set; } 
    public int ticketGen { get; set; }
    protected override async Task OnInitializedAsync()
    {
        commandeMade = new AddCommandDto();
        await Init();
    }
    public async Task Init()
    {
        piececlt = await ServPiece.GetById(IdPiece);
        salleclt = await ServSalle.GetById(IdSalle);
        repclt = await Servrep.GetById(IdRepresnetation);
    }

    public void UpdatePrice(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int numberOfTickets))
        {
            ticketGen = numberOfTickets;//nombre de ticket generer
            int TicketPrice = CalculateTicketPrice();
            int price =Math.Max (0,numberOfTickets *TicketPrice ); //calcule du pri
            Priceclt = price;
            userCommand(ticketGen);
        }
        else
        {
            // Handle invalid input
        }
    }

    // Method to calculate the ticket price
    private int CalculateTicketPrice()
    {

        return (int) repclt.Prix; 
    }
    public void userCommand(int genereate)
    {
        List<AddTicketDto> listCommande = new List<AddTicketDto>();
        commandeMade = new AddCommandDto
        {
                AuthId ="",
                IdRepresentation = IdRepresnetation,
                NombreDePlace = genereate,
               
        };
        //n'entre pas dans la methodes pour une raison inconnue pour le moment a debatre 
    }
    public async Task MakingCommande()
    {
        commandeMade.NombreDePlace = ticketGen;
        commandeMade.IdRepresentation = IdRepresnetation;
        await Servrep.AddCommandRepresentation( IdRepresnetation,ticketGen,commandeMade);
        await Task.Delay(100);
        getProfile();
    }

    public void getProfile() => manager.NavigateTo("/profileViewer");
    public void getHome() => manager.NavigateTo("/profileViewer");
    public void getPrevious() => manager.NavigateTo($"/representation/{IdPiece}");
}
