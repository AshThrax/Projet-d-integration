
@using Microsoft.AspNetCore.Components.QuickGrid
@inject Blazor.UI.services.IRepresentationService ServP;
<h3>GetCommand</h3>

<br>    
@if (lstCommand != null)
{

<QuickGrid Items="@lstCommand.AsQueryable()">
        <PropertyColumn Property="p =>p.Id"  Title="Id"  Sortable="true" />
        <PropertyColumn Property="p =>p.NombreDePlace" Title="nombre de place" />
        <TemplateColumn Context="item" Title="representation">
           <div>
               <button type="button" class="btn btn-warning" @onClick="LoadRepresentation(item.IdRepresentation)" >represnetation</button>
           </div>
          </TemplateColumn>
    </QuickGrid>

    if (selectRepresnetaion != null)
    {
        <Representation></Representation>
        <br>
        <div>
            <button type="btn btn-warning" @onclick="Clean"> clean</button>
        </div>
    }
    else
    {
        
    }
}
else
{
    <Blazor.UI.Client.Shared.Load loadParam="en attente de chargement"></Blazor.UI.Client.Shared.Load>
}
@code {
    [Parameter]
    public IEnumerable<CommandDto>? lstCommand { get; set; }
    public RepresentationDto? selectRepresnetaion { get; set; }

    public async Task LoadRepresentation(int id)
    {
        selectRepresnetaion = await ServP.GetById(id);
    }
    public void Clean() 
            => selectRepresnetaion = null;
}
