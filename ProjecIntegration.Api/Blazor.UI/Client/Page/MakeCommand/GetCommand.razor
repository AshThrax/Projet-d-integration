@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.services
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IRepresentationService ServP;
@inject IPieceService ServPiece;
<div class="m-4 p-4 row">
    <h6 class="m-b-20 p-b-5 b-b-default f-w-600">Vos Commande</h6>
    <br>    
    @if (lstCommand != null && lstCommand.Count>0)
    {
        <div class="col ">
            @foreach (var item in lstCommand)
            {
              <Blazor.UI.Client.Page.Profile.Component.UserCommande commandDto="item"></Blazor.UI.Client.Page.Profile.Component.UserCommande>
            }
        </div>

      
    }
    else
    {
        <Blazor.UI.Client.Shared.Load loadParam="en attente de chargement">
        </Blazor.UI.Client.Shared.Load>
    }

</div>
@code {
    [Parameter]
    public List<CommandDto> lstCommand { get; set; } = new();
    public RepresentationDto? selectRepresnetaion { get; set; } = new();
    public int SelecteCommand { get; set; }
    int pieceid { get; set; }
    public PieceDto? Piecerep { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (lstCommand !=null)
        {
            int id = lstCommand.ElementAt(0).IdRepresentation;
            SelecteCommand = lstCommand.ElementAt(0).NombreDePlace;
            selectRepresnetaion = await ServP.GetById(id);
            pieceid = selectRepresnetaion.PieceId;
            Piecerep = await ServPiece.GetById(pieceid);
            await Task.Delay(1000);
            
        }
    }

    public async Task LoadRepresentation(int id)
    {
        SelecteCommand = lstCommand.ElementAt(id).NombreDePlace;
        selectRepresnetaion = await ServP.GetById(id);
        pieceid = selectRepresnetaion.PieceId;
        Piecerep = await ServPiece.GetById(pieceid);
        await Task.Delay(1000);
    }
    public void Clean() 
            => selectRepresnetaion = null;

}
