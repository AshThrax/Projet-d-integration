@using Blazor.UI.Data.modelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.modelViews
@using Blazor.UI.data.services
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IRepresentationService ServP;
@inject IPieceService ServPiece;
<div class="m-4 p-4 row">
    <h3>Vos Commandes</h3>

    <br>    
    @if (lstCommand != null )
    {
        <div class="col ">
            <QuickGrid Items="@lstCommand.AsQueryable()">
                <PropertyColumn Property="p =>p.Id"  Title="#"  Sortable="true" />
                <PropertyColumn Property="p =>p.NombreDePlace" Title="nombre de place" />
                <TemplateColumn Title="representation">
                   <div>
                       <button type="button" class="btn btn-warning float-end" @onclick="() =>LoadRepresentation(context.IdRepresentation)">
                           representation</button>
                   </div>
                  </TemplateColumn>
            </QuickGrid>
        </div>

        if (selectRepresnetaion !=null && Piecerep != null)
        {
            <div class=" border border-end text-center">
                <div class="m-4 p-4">
                    <h5 class="">@Piecerep.Titre</h5>
                </div>
                <div class="w-50 h-25 float-end">
                    <Blazor.UI.Client.Page.RepresentationPage.RepresnetationDetails PlaceCommand="@SelecteCommand" SelectedItem="@selectRepresnetaion">
                     </Blazor.UI.Client.Page.RepresentationPage.RepresnetationDetails>

                </div>
            <br>
            </div>
            <div class="m-2 p-2">
                <button type="button" class="btn btn-warning float-end" @onclick="Clean"> clean</button>
            </div>
        }
        else
        {
            <Blazor.UI.Client.Shared.Load></Blazor.UI.Client.Shared.Load>
        }
    }
    else
    {
        <Blazor.UI.Client.Shared.Load loadParam="en attente de chargement">
        </Blazor.UI.Client.Shared.Load>
    }

</div>
@code {
    [Parameter]
    public List<CommandDto> lstCommand { get; set; } = new();
    public RepresentationDto? selectRepresnetaion { get; set; } = new();
    public int SelecteCommand { get; set; }
    int pieceid { get; set; }
    public PieceDto? Piecerep { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        int id = lstCommand.ElementAt(0).IdRepresentation;
        SelecteCommand = lstCommand.ElementAt(0).NombreDePlace;
        selectRepresnetaion = await ServP.GetById(id);
        pieceid = selectRepresnetaion.IdPiece;
        Piecerep = await ServPiece.GetById(pieceid);
        await Task.Delay(1000);
    }

    public async Task LoadRepresentation(int id)
    {
        SelecteCommand = lstCommand.ElementAt(id).NombreDePlace;
        selectRepresnetaion = await ServP.GetById(id);
        pieceid = selectRepresnetaion.IdPiece;
        Piecerep = await ServPiece.GetById(pieceid);
    }
    public void Clean() 
            => selectRepresnetaion = null;
}
