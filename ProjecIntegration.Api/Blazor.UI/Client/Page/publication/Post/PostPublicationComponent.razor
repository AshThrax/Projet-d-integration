@using Blazor.UI.Data.ModelViews.Publication
@using Blazor.UI.Data.ServiceResult
@using Blazor.UI.data.services.Publication
@inject IPostService PostService;

<div class="container justify-content-end">
    @if (GetPostFromPublication != null )
    {
        @foreach (PostDto subItem in GetPostFromPublication.Items)
        {   <br/>
            <SinglePost Item="subItem"></SinglePost>
        }
    }
    <div class="row">
        <nav class="nav float-end">
            <a @onclick="() =>PreviousPage()" class="nav-item btn btn-outline-dark">Previous</a>
            <a>@pageIndex</a>
            <a @onclick="()=>NextPage()" class="nav-item btn btn-outline-dark">suivant</a>
        </nav>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public UserDto GetUserDto { get; set; } = new();

    [Parameter]
    public string Id { get; set; }

    public Pagination<PostDto>? GetPostFromPublication { get; set; }
    public int pageIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        GetPostFromPublication = await PostService.GetAllByPublicationId(Id, pageIndex);
        pageIndex = GetPostFromPublication.PageIndex;
        await auth();

    }
    #region auth
    protected async Task auth()
    {

        var state = await AuthenticationStateTask;
        GetUserDto = new UserDto
            {
                User_id = state?.User.Claims?.FirstOrDefault(c => c.Type == "user_id")?.Value,
                Email = state?.User?.Claims?.FirstOrDefault(c => c.Type == "email")?.Value,
                FamilyName = state?.User.Claims.FirstOrDefault(c => c.Type == "family_name")?.Value,
                GivenName = state?.User.Claims.FirstOrDefault(c => c.Type == "given_name")?.Value,
                Name = state?.User.Claims.FirstOrDefault(c => c.Type == "user_name")?.Value,
                Picture = state?.User.Claims.FirstOrDefault(c => c.Type == "picture")?.Value,
                UserName = state?.User.Claims.FirstOrDefault(c => c.Type == "name")?.Value,


            };
    }
    #endregion
    #region Pagination
    public async Task NextPage()
    {
        if (GetPostFromPublication.HasNextPage)
        {
            pageIndex++;
            GetPostFromPublication = await PostService.GetAllByPublicationId(Id, pageIndex);

        }
    }
    public async Task PreviousPage()
    {
        if (GetPostFromPublication.HasPreviousPage)
        {
            pageIndex--;
            GetPostFromPublication = await PostService.GetAllByPublicationId(Id, pageIndex);

        }
    }
    #endregion
}
