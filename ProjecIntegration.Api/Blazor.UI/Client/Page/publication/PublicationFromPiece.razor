@page "/publicationbypiece/{Id:int}"
@using Blazor.UI.Data.ModelViews.Publication
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.ServiceResult
@using Blazor.UI.Data.services.Publication
@using Blazor.UI.Data.services.TheatherService
@inject IPieceService Servp;
@inject IRepresentationService PieceRep;
@inject IPublicationService pubService;
@inject ICommandService comService;
<PageTitle>Publication</PageTitle>
<div class="row">
    <div class="col-3 col-sm-3">
        @if (SelectPieceDtos !=null)
        {
            <div class="rounded bg-light col-md-5">
                <div class="col mt-2 pt-2">
                    <img class="img-thumbnail" src="https://localhost:7170/Resources/@SelectPieceDtos.Image" />
                </div>
                <div class="col ">
                    <h4>Representation Details</h4>
                    <p><strong>Title: </strong> @SelectPieceDtos.Titre</p>
                    <p><strong>Duration: </strong> @SelectPieceDtos.Duree</p>
                    <p class="lead"><strong>Description: </strong> @SelectPieceDtos.Description</p>
                </div>
            </div>
        }
    </div>
    <div class="col-3 col-sm-3">
        @if (amiAutorized)
        {
        <div class=" mt-4 h-50 btn-group-lg float-end">
                @if (!Hasreview)
                {
                    <button class="btn btn-success" @onclick="() =>OnOpenDialogBox()">Ajouter une Critique</button>
                }
                else
                {
            
                }
                @if (DialogBox)
                {
                    <Blazor.UI.Client.Page.publication.Publication.AddPublicationComponent Id="Id" OnClose="CloseDialogBox">
                </Blazor.UI.Client.Page.publication.Publication.AddPublicationComponent>
            
                }
                else
                {
            
                }
        </div>
        }
        else
        {
        
        }
        <div class="mt-4 h-50 ">
                <Blazor.UI.Client.Page.publication.Publication.PublicationComponent PieceId="Id">
                </Blazor.UI.Client.Page.publication.Publication.PublicationComponent>
        </div>

    </div>

</div>
@code {
    [Parameter]
    public int Id { get; set; }
    public Pagination<PublicationDto>? PiecePublication { get; set; }
    public PieceDto SelectPieceDtos { get; set; }
    public bool amiAutorized = false;
    public int pageIndex = 1;
    public int pageIndexPub = 1;
    protected override async Task OnInitializedAsync()
    {
        await DataLoad();
        await Task.Delay(100);
    }
    public async Task DataLoad()
    {
        PiecePublication = await pubService.GetAllPublicationByPieceId(1, Id);
        amiAutorized = await comService.DoIHaveacommand(Id);
        Hasreview = await pubService.Hasreview(Id);
        SelectPieceDtos = await Servp.GetById(Id);
        await Task.Delay(100);
    }
    public async Task NextPubPage()
    {
        if (PiecePublication.HasNextPage)
        {
            pageIndexPub++;
            PiecePublication = await pubService.GetAllPublicationByPieceId(pageIndexPub, Id);
        }
    }
    public async Task PreviousPubPage()
    {
        if (PiecePublication.HasNextPage)
        {
            pageIndexPub++;
            PiecePublication = await pubService.GetAllPublicationByPieceId(pageIndexPub, Id);
        }
    }
    #region ModelState
    public bool Hasreview { get; set; }
    public bool DialogBox { get; set; } = false;
    public void OnOpenDialogBox()
    {
        DialogBox=true;
        StateHasChanged();
    }
    public void CloseDialogBox()
    {
        DialogBox=false;
        StateHasChanged();
    }
    #endregion
}
