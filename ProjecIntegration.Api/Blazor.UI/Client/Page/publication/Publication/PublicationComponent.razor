@using Blazor.UI.Data.ModelViews.Publication
@using Blazor.UI.Data.ServiceResult

@using Blazor.UI.Data.services.Publication
@inject IPublicationService pubService;
@inject NavigationManager manager;
<h3>Avis :</h3>
<div class="flex-fill m-4 p-4">
    <div class="container-fluid">
    <div class="row shadow-sm">
            @if (PiecePublication != null && PiecePublication.Items.Count > 0)
            {
                @foreach (var item in PiecePublication.Items)
                {
                    <SinglePublication item="item"></SinglePublication>
                }
                <nav class="row  m-2 p-2 float-end">
               
                    <div class="col-sm-3 btn-group w-25">
                        <a type="button" class="btn btn-outline-dark" @onclick="() =>PreviousPubPage()">precedent</a>
                        <a type="button" class="btn btn-outline-dark" @onclick="() => NextPubPage()">suivant</a>
                    </div>
                </nav>
            }
            else
            {
                <div>
                    <h3>
                        cette Piéce ne posséde aucun avis pour le momment
                    </h3>
                </div>
            } 
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Pagination<PublicationDto>? PiecePublication { get; set; }
    [Parameter]
    public int PieceId { get; set; }

    public int pageIndexPub = 1;

    protected override async Task OnInitializedAsync()
    {
        PiecePublication = await pubService.GetAllPublicationByPieceId(1, PieceId);
        await Task.Delay(1000);
    }

    public void GetPost(string annId)
    {
        manager.NavigateTo($"/publication/{annId}");
    }
    public async Task NextPubPage()
    {
        if (PiecePublication.HasNextPage)
        {
            pageIndexPub++;
            PiecePublication = await pubService.GetAllPublicationByPieceId(pageIndexPub, PieceId);
        }
    }
    public async Task PreviousPubPage()
    {
        if (PiecePublication.HasNextPage)
        {
            pageIndexPub++;
            PiecePublication = await pubService.GetAllPublicationByPieceId(pageIndexPub, PieceId);
        }
    }
}
