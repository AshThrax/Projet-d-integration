@* Client/Pages/profileViewer.razor *@
@page "/profileViewer"
@using System.Security.Claims
@attribute [Authorize]      
@attribute [StreamRendering]

@inject Blazor.UI.services.ICommandService ServCom;
<div class="bg-light m-4 p-2 rounded-2 text-center">
    <h3>Profile page </h3>
</div>
<div class="col-10">
    <div class="bg-light rounded-2 m-4 p-2 float-start align-content-center">
        <img class="border-1 rounded-3"
            src="@Profile" />
        <div class=" text-start p-2">
            <h3>Bonjour : @givenName</h3>
            <h4>Comment allez vous?</h4>  
            <div class="col float-start  mb-4 mt-4 ps-2 pe-2 bg-light">
                <h3>Information</h3>
                <div class="p-2">
                    <p>Prénom: @givenName</p>
                    <p>Nom de famille : @familyName</p>
                    <p>nom d'utilisateur': @Username</p>
                    <p>mail : @Mail</p>
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <button type="button" class="btn btn-primary btn-success nav-link alert-success" @onclick="() => ShowProfile()">
                 Profile
            </button>
        </li>
        <li class="nav-item">
            <button type="button" class="btn btn-primary btn-success nav-link alert-success" @onclick="() => ShowCommand()">
                Commande
            </button>
        </li>
    </ul>
    <br />
    @if (isProfile)
    {
    
            <div class="row shadow-sm ps-2 pe-2 pb-4 bg-light rounded-3">

                <div class="col"></div>
                <div class="col"></div>
                <div class="col"></div>
                <div class="col-sm-9">
                    <p class="lead"> Rappel tester l'auth coté server depuis blazor</p>
                    <button type="button" class="col-sm-9" @onclick="() => GetAuth()">
                        test auth
                    </button>
                </div>
            </div>
      
       
   
    }
    else
    {
        <div class="row shadow-sm ps-2 pe-2 pb-4 bg-light rounded-3">
            <div class="col float-start  mb-4 mt-4 ps-2 pe-2 bg-light">
                <Blazor.UI.Client.Page.MakeCommand.GetCommand lstCommand="CommandUser"></Blazor.UI.Client.Page.MakeCommand.GetCommand>
            </div>
        </div>
    }
</div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string token;
    private string Username = "";
    private string givenName ="";
    private string familyName = "";
    private string Mail = "";
    private string Profile="";
    public bool isProfile { get; set; } = true;
    public bool isCommand { get; set; }


    public IEnumerable<CommandDto> CommandUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        auth();
        CommandUser = await ServCom.GetByUser();

        await base.OnInitializedAsync();
    }
    public async void GetAuth()
    {
        await ServCom.GetAuth();
    }
    public void ShowCommand()
    {
        isCommand = true;
        isProfile = false;
    }
    public void ShowProfile()
    {
        isProfile= true;
        isCommand = false;
    }
    protected async Task auth()
    {

        var state = await AuthenticationStateTask;

        
        Username = state.User.Identity.Name ?? string.Empty;
        if (Username == "")
        {
            Username = state.User.Claims.FirstOrDefault(c => c.Type == "given_name")?.Value;
        }
        givenName = state.User.Claims.FirstOrDefault(c => c.Type == "given_name")?.Value;
        familyName = state.User.Claims.FirstOrDefault(c => c.Type == "family_name")?.Value;
        Mail = state.User.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
        Profile = state.User.Claims.FirstOrDefault(c => c.Type == "picture")?.Value;
       
    }
}
