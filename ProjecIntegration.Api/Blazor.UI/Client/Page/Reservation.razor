@page "/reservation"
@attribute [Authorize]
@attribute [StreamRendering]
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.ServiceResult
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.services.TheatherService
@using Microsoft.AspNetCore.Components.QuickGrid
@using Blazor.UI.Client.Page.ReservationComponent
@inject IComplexeService complexeService;
@inject ICatalogueService catalogueService;
@inject IPieceService pieceService;
@inject IThemeService themeService;
@inject NavigationManager manager;
<div class="flex-fill m-4 p-4">
<h3 class=" bg-light  m-4 p-2 rounded-2 text-center">Recherche de pièce de théatre</h3>

    <div class="container-fluid">
        <ul class=" nav nav-tabs">
            <li class=" nav-item m-2">
                <h3>Theme</h3>
                <select @oninput="OnSelectedTheme" @bind="SelectedThemeId" class="form-control form-control-sm m-2 p-2">
                    <option value="0">choissir un theme</option>
                    @foreach (ThemeDto item in GetAllTheme)
                    {
                      <option value="@item.Id">@item.Libelle</option>  
                    }
                </select>

            </li>
            <li class="nav-item m-2">
                <h3>Complexe</h3>
                <select @bind="SelectComplexeId" @oninput="OnSelectedComplexe" class="form-control form-control-sm  m-2 p-2">
                    <option value="0"> choisir un complexe</option>
                    @foreach (var item in GetComplexes)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </li>
            <li class="nav-item m-2">
                <h3>Catalogue</h3>
                <select @bind="SelectCatalogueId" @oninput="OnSelectedCatalogue" class="form-control form-control-sm  m-2 p-2">
                    <option > Choisir un catalogue</option>
                    @foreach (var item in GetCatalogues)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </li>
           
        </ul>
    </div>
    <br />
    <div class="btn-group mb-2">
        <nav class="nav navbar btn-group float-lg-end">
            <a class=" nav-item btn btn-dark btn-outline-secondary" @onclick="PreviousPage"> precedent</a>
            <a class=" nav-item btn btn-dark btn-outline-secondary" @onclick="NextPage"> suivant</a>
        </nav>
    </div>
    <div class="col-sm-9">
        @if (pieceDtos != null)
    {
        @foreach (var item in pieceDtos.Items)
        {
                <div class="bg-white row featurette  rounded shadow mb-2 pb-2">
                    <div class="m-2 p-2">
                        <div class="col-md-5 p-2">
                            <div class="card-img">
                                   <img class="img-fluid" src="https://localhost:44337/Resources/@item.Image" />
                            </div>
                        </div>
                        <div class="col-md-7 p-2">
                                <p class="card-text"><strong>Auteur :</strong>@item?.Auteur</p>
                                <p class="card-text"><strong>Descirption :</strong>@item?.Description</p>
                                <p class="card-text"><strong>Durée de la pièce :</strong>@item?.Duree</p>
                                <div class="btn-group">
                                     <a @onclick="() => GetToPublication(item.Id)" type="button" class="btn btn-secondary p-1 shadow-sm">Critique</a>
                                     <a @onclick="() => GetSeance(item.Id)" type="button" class="btn btn-secondary p-1 shadow-sm">Seance</a>
                                </div>
                        </div>
                    </div>   
            </div>
        }
    }
    </div>
</div>

@code {
    public Pagination<PieceDto>? pieceDtos { get; set; } 
    public List<ThemeDto> GetAllTheme { get; set; }=new();
    public ThemeDto singleTheme { get; set; } = new();
    public int SelectedThemeId { get; set; }
    public List<ComplexeDto> GetComplexes { get; set; } = new();
    public ComplexeDto singleComplexe { get; set; } = new();
    public int SelectComplexeId { get; set; }
    public List<CatalogueDto> GetCatalogues { get; set; } = new();
    public CatalogueDto singleCatalogue{ get; set; } = new();
    public int SelectCatalogueId { get; set; }

    //pagination variable
    public int pageIndex = 1;
    public bool Bycatalogue { get; set; } = false;
    public bool GetAll { get; set; } = true;
    public bool ByTheme { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        //var convert  = await _complexeService.Get();
        pieceDtos = (await pieceService.Get(pageIndex));
        GetAllTheme = (await themeService.GetAllTheme()).ToList();
        GetComplexes = (await complexeService.Get()).ToList();
        // getComplexe = convert;
        await Task.Delay(1000);
    }

    public async Task OnSelectedComplexe(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelectComplexeId = selectedId;
            singleComplexe = await complexeService.GetById(SelectComplexeId);
            GetCatalogues = (await catalogueService.GetAllCatalogueByComplexeId(selectedId)).ToList();
        }
    }
    public async Task OnSelectedCatalogue(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            Bycatalogue = true;
            ByTheme = false;
            SelectCatalogueId = selectedId;
            singleCatalogue = await catalogueService.GetCatalogue(SelectCatalogueId);
            pageIndex = 1;
            pieceDtos = (await pieceService.GetByCatalogue(SelectCatalogueId,pageIndex));
        }
    }

    public async Task OnSelectedTheme(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            ByTheme = true;
            Bycatalogue = false;
            SelectedThemeId = selectedId;
            if (SelectedThemeId == 0)
            {
                pageIndex = 1;
                pieceDtos = (await pieceService.Get(pageIndex));
            }
            else
            {
                pageIndex = 1;
                pieceDtos = (await pieceService.GetByTheme(SelectedThemeId,pageIndex));

            }
        }
    }

    public void GetDescription(int id)
    {
        manager.NavigateTo($"/pieceinfo/{id}");
    }
    public void GetSeance(int id)
    {
        manager.NavigateTo($"/representation/{id}"); 
    }
    public void GetToPublication(int Id)
    {
        manager.NavigateTo($"/publicationbypiece/{Id}");
    }
    public async Task NextPage()
    {
        if (pieceDtos.HasNextPage)
        {
            pageIndex++;
            if (ByTheme && !Bycatalogue)
            {
                pieceDtos = await pieceService.GetByTheme(SelectedThemeId, pageIndex);
            }
            else if (!ByTheme && Bycatalogue)
            {
                pieceDtos = await pieceService.GetByCatalogue(SelectCatalogueId, pageIndex);
            }
            else
            {
                pieceDtos = await pieceService.Get(pageIndex);
            }
        }
    }
    public async Task PreviousPage()
    {
        if (pieceDtos.HasPreviousPage)
        {
            pageIndex--;

            if (ByTheme && !Bycatalogue)
            {
                pieceDtos = await pieceService.GetByTheme(SelectedThemeId, pageIndex);
            }
            else if (!ByTheme && Bycatalogue)
            {
                pieceDtos = await pieceService.GetByCatalogue(SelectCatalogueId,pageIndex);
            }
            else
            {
                pieceDtos = await pieceService.Get(pageIndex);
            }
        }
    }
}
