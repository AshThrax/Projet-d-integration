@using Microsoft.AspNetCore.Components.QuickGrid
@using Blazor.UI.data.modelViews
@using Blazor.UI.data.services
@inject             IPieceService serVPiece;
@inject             ISalleService servSalle;
<h3>PieceRepresnetation</h3>
@if (Piecetab != null)
{
    <QuickGrid Items="@Piecetab.AsQueryable()">
            <PropertyColumn Property="@(p => p.Titre)" Sortable="true" Title="Title" />
            <PropertyColumn Property="@(p => p.Duree)" Sortable="true" Title="Duration" />
            <PropertyColumn Property="@(p => p.Description)" Sortable="true" Title="Description"/>
            <TemplateColumn Context="items" Title="Representations">
                <div>
                        <button type="button" class="btn btn-success" @onclick="() => PieceRep(items.Representations)">representation</button>
          
                </div>
            </TemplateColumn>
    </QuickGrid>
}
else
{
<Blazor.UI.Client.Shared.Load load loadParam="aucun Complexe n'aété selectionnée"></Blazor.UI.Client.Shared.Load>    
}
@code {
    [Parameter]
    public int Id { get; set; }
    public IEnumerable<PieceDto> Piecetab { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Piecetab = await serVPiece.GetByComplexe(Id);
        await base.OnInitializedAsync();
    }
    public void PieceRep(IEnumerable<RepresentationDto> Dto)
    {
        
    }
}
