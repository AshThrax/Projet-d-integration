@page "/publication/{Id:int}"
@using Blazor.UI.Data.modelViews.Publication
@using Blazor.UI.Data.modelViews.Theater
@using Blazor.UI.Data.services.Publication
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.services.Publication

@inject IPublicationService publicationService;
@inject IPieceService pieceService;
@inject IPostService postService;
<h3>PublicationForPublication</h3>

<div class="flex-fill m-4 p-4">

    @foreach (var item in GetPublicationForPiece)
    {
        <div class="row card bg-white m-4 p-4 rounded">
            <div class="m-4 p-4">
                <h3 class="card-header">@item.Title</h3>
                <p class="card-text">@item.Review</p>
            </div>
            @if (item.post.Count > 0)
            {
                <a class="btn btn-dark w-25 float-end" @onclick="()=>GetPost(item.Id)">Afficher les réponses</a>
                @if (AfficherPost)
                {
                    @foreach (var subItem in GetPostFromPublication)
                    {
                        <div class="row">
                            <div class="col-sm-3"></div>
                            <div class="col-sm-3"></div>
                            
                            <div class="col-sm-6 card m-4 p-4 float-end w-25">
                                <p class="card-text">@subItem.Content</p>
                                <p class="card-text"></p>
                            </div>
                        </div>
                    }
                    <a class="btn btn-dark float-end w-25" @onclick="RemovePostFromView" > replier les posts</a>
                }
                else
                {
                    
                }

        }
        else
        {
           <p>meh</p>
        }
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public PieceDto GetPublication { get; set; } = new();
    public List<PublicationDto> GetPublicationForPiece { get; set; } = null;
    public List<PostDto> GetPostFromPublication { get; set; }
    public bool AfficherPost { get; set; } = false;
    public int pageIndex { get; set; } = 1;
    protected override async Task OnInitializedAsync()
    {
        GetPublicationForPiece = (await publicationService.GetAllPublicationByPieceId(Id)).ToList();
        GetPublication = await pieceService.GetById(Id);
    }
    public async Task GetPost(string Id)
    {
        GetPostFromPublication = (await postService.GetAllByPublicationId(Id)).ToList();
        AfficherPost = true;
    }
    public void RemovePostFromView()
    {
        AfficherPost = false;    
    }
    public void AddPost()
    {

    }
    public void AddPublication()
    { 
    }
}
