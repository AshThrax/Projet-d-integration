@page "/representation/{Id:int}"
@using Blazor.UI.Data.modelViews.Theater
@attribute [Authorize(Roles ="Admin")]
@attribute [StreamRendering]
@using Blazor.UI.Data.services.TheatherService
@using Microsoft.AspNetCore.Components.QuickGrid
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
@inject  IRepresentationService servRep;
@inject  IPieceService servPiece;
@inject  ISalleService servsalle;

<div class="jumbotron bg-light m-2 p-2 rounded">
    <div class="m-2 p-2  m-2 p-2 border rounded-4">
        <h3 class="dispaly-1">Representation Summary</h3>

    </div>
</div>
<div class="row">
    <div class="col">

  
        @if (myPiece != null)
        {
            <div class="m-2 p-2 bg-light border rounded">
                <div class="m-2 p-2">
                    <h4>Representation Details</h4>
                    <p><strong>Title: </strong> @myPiece.Titre</p>
                    <p><strong>Duration: </strong> @myPiece.Duree</p>
                    <p><strong>Description: </strong> @myPiece.Description</p>
                    <p><strong>Salle : </strong>@Piecesalle?.Name</p>
                </div>
            </div>
        }  
    </div>
        <div class="col">
   
            <div class="m-2 p-2">
                <div class="m-2 p-2">
        
                    <h3 class="dispaly-1">Representations: @myPiece?.Titre </h3>
                </div>
            </div>

            <div class="m-2 p-2 bg-light rounded">
                <div class="m-2 p-2">
                    <QuickGrid Items="@Myrepresnetation?.AsQueryable()">
                        <PropertyColumn Property="@(p => p.Prix)" Sortable="true" Title="Price" />
                        <PropertyColumn Property="@(p => p.Seance.Year)" Sortable="true" Title="Seance" />
                        <PropertyColumn Property="@(p => p.Seance.Month)" Title="Mois" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Seance.Day)" Title="Jour" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Seance.Hour+":"+ p.Seance.Hour)" Sortable="true" />
                        <TemplateColumn Title="Selectioner une represnentation">
                         
                                    <div>
                                        <button type="button" class="btn btn-warning" @onclick="() =>seanceDetails(context)">Details</button>
                                    </div>
                            
                            </TemplateColumn>
                       
                    </QuickGrid>

                </div>
            </div>
    </div>
</div>
@if (selectedRepresentation != null)
{
    <div class="bg-light p-2 m-2 rounded w-25">
        <div class=" text-md-start">
            <div class="p-2 m-2">
                <h4>Seance details</h4>
                <br />
                <p><strong>Price:</strong> @selectedRepresentation.Prix</p>
                <div>
                    <p><strong>Seance</strong></p>
                    <div class="m-4">
                        <p><strong>Date :</strong>@selectedRepresentation.Seance.Date.Year/@selectedRepresentation.Seance.Date.Month/@selectedRepresentation.Seance.Date.Day</p>
                        <p><strong>Heure:</strong>@selectedRepresentation.Seance.Hour:@selectedRepresentation.Seance.Minute </p>
                    </div>
                </div>
                <p><strong>Salle</strong>: @Piecesalle?.Name</p>
            </div>    
            <div class="p-2 m-2 ">
                <p class="lead">Desirer vous reserver cette seance la </p>
                <button type="button" class="btn btn-warning" @onclick="() => MakeCommand(selectedRepresentation.Id)">Commander</button>
            </div>

        </div>
    </div>
}
else
{
<Blazor.UI.Client.Shared.Load loadParam="il est possible qu'aucune seance ne soit prévue"></Blazor.UI.Client.Shared.Load>    
}
@code {
    [Parameter]
    public int Id { get;  set;}
    private PieceDto? myPiece { get; set; } = new();
    private IEnumerable<RepresentationDto>? Myrepresnetation;
    private RepresentationDto? selectedRepresentation;
    private SalleDeTheatreDto? Piecesalle;
    // Populate yourData with actual data, for example, in the OnInitializedAsync method

    protected override async Task OnInitializedAsync()
    {
        // Initialize yourData with actual data
        Myrepresnetation = await servRep.GetPiece(Id); // Replace RepresentationService with your actual service class
        await ShowPieceDetails(Id);
    }

    private async Task ShowPieceDetails(int id)
    {
        myPiece = await servPiece.GetById(Id);
       
    }
    private void seanceDetails(RepresentationDto select )
    {
        selectedRepresentation = select;
    }
    public void MakeCommand(int id)
    {
        NavigationManager.NavigateTo($"/makecommand/{myPiece.Id}/{Piecesalle.Id}/{id}");
    }
}
