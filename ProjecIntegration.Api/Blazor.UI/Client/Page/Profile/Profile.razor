@page "/profile"

@using Blazor.UI.Data.ModelViews.Publication
@using Blazor.UI.Data.ModelViews.Theater
@using System.Security.Claims
@attribute [Authorize]
@attribute [StreamRendering]

@using Blazor.UI.Data.ModelViews.User
@using Blazor.UI.Data.ServiceResult
@using Blazor.UI.Data.ModelViews.Theater
@using Blazor.UI.Data.ModelViews.Publication
@using Blazor.UI.Data.Services.User
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.services

@inject ICommandService ServCom;
@inject IBannerService bannerService;
<div class="float-end">
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasScrolling" aria-controls="offcanvasScrolling">Option</button>

    <div class="offcanvas offcanvas-end" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasScrolling" aria-labelledby="offcanvasScrollingLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Personnalisation du profile Utilisateur</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <button class="btn btn-outline-info float-end" @onclick="() =>WillUpdateBannerOpen()">update banner</button>
            
        </div>
    </div>
    @if (willUpdateBanner)
    {
       @if(bannerDto !=null)
       {
        <Blazor.UI.Client.Page.Profile.Component.ChangerBanner Id="bannerDto.Id" OnClose="WillUpdateBannerClose"></Blazor.UI.Client.Page.Profile.Component.ChangerBanner>
            
       }
    }
    else
    {

    }
</div>

    <div class="profile-container">
        <div class="cover-photo">
            @if (bannerDto != null)
            {
                <img class="cover-photo-img" src="https://localhost:7170/Resources/@bannerDto.ImageRessource" alt="Alternate Text" />

            }
            else
            {
                
            }
           
        </div>
    <div class="m-2 p-2"></div>
        <div class="profile-info">
            <div class="profile-photo">
                <img class="profile-img" src="@userDto.Picture" alt="Alternate Text" />

            </div>
            <div class="user-details pt-4">
                <h2>@userDto.GivenName</h2>
                <p></p>
            </div>
        </div>
    </div>
    <div class="m-2 p-2"></div>
    <div class="row">

        <div class="profile-stats m-2 p-2">

            <div class="stat">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><span>Publication</span></li>
                    @if (isfollower)
                    {
                        <li class="list-group-item"><a class="btn btn-outline-dark" @onclick="()=>ShowFollower()">liste des follower</a></li>
                    }
                    else
                    {
                    <li class="list-group-item"> <a class="btn btn-outline-dark" @onclick="()=>ShowFollower()">Montrer les follower</a></li>


                    }
                </ul>
            </div>
            <div class="stat">
            <ul class="list-group list-group-flush">
                <li class="list-group-item"><span>Favoris</span></li>
                @if (isfollower)
                {
                    <li class="list-group-item"><a class="btn btn-outline-dark" @onclick="() =>ShowFavorite()">liste des Favoris</a></li>
                }
                else
                {
                    <li class="list-group-item"> <a class="btn btn-outline-dark" @onclick="() =>ShowFavorite()">Montrer les favoris</a></li>


                }
                </ul>
            </div>
            <div class="stat">
            <ul class="list-group list-group-flush">
                <li class="list-group-item"><span>Commande</span></li>
                @if (isCommand)
                {
                    <li class="list-group-item"><a class="btn btn-outline-dark" @onclick="()=>ShowCommand()">enlever les commande</a></li>
                }
                else
                {
                    <li class="list-group-item"> <a class="btn btn-outline-dark" @onclick="()=>ShowCommand()">Montrer les commandes</a></li>


                }
            </ul>
            </div>
          
        </div>
    </div>
    <div class="container text-md-center">
        @if (isfollower)
        {
            <p>hello</p>
            <Blazor.UI.Client.Page.Profile.Component.ListeFollowerComponent  ></Blazor.UI.Client.Page.Profile.Component.ListeFollowerComponent>
        }
        else if (isCommand)
        {
            if (CommandUser != null)
            {
                @if (CommandUser.Items != null && CommandUser.Items.Count > 0)
                {
                    <div class="nav float-end btn-group">
                            <a class="btn btn-outline-dark" @onclick="PreviousPage">previous</a>
                            <a class="btn btn-outline-dark" @onclick="NextPage">suivant</a>
                    </div>
                    <div class="col float-start  mb-4 mt-4 ps-2 pe-2 bg-light">
                            <Blazor.UI.Client.Page.MakeCommand.GetCommand lstCommand="CommandUser.Items">

                            </Blazor.UI.Client.Page.MakeCommand.GetCommand>
                    </div>
             
                }
                else
                {
                    <div class="card m-4 p-4 text-sm-center">
                        <h2 class="card-header-tabs">vous n'avez pas de commande lier a une reservation</h2>
                        <h2 class="card-header-tabs"><a href="/reservation">vous faire une reservation</a></h2>
                        <p class="card-text"></p>
                    </div>
                }
            }
            else
            {

            }
        }
        else if (isFavorite)
        {
            <div>
                <Blazor.UI.Client.manager.Piece.Component.ShowFavorite>
                </Blazor.UI.Client.manager.Piece.Component.ShowFavorite>
            </div>
        }
        else if(isProfile)
        {
            <div class="">
                <h3>Bienvenue @userDto.GivenName</h3>
        </div>
        }
        else
        {
          <p>Tested</p>
        }
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public bool isProfile { get; set; } = false;
    public bool isCommand { get; set; } = false;
    public bool isFavorite { get; set; } = false;
    public bool isfollower { get; set; } = false;
    public bool willUpdateBanner { get; set; } = false;


    public Pagination<CommandDto>? CommandUser { get; set; }
    public UserDto? userDto { get; set; } = new();
    public BannerDto? bannerDto { get; set; }
    public int pageindex = 1;
    protected override async Task OnInitializedAsync()
    {
        await auth();
        await Dataload();
        await Task.Delay(100);
    }
    public async Task Dataload()
    {
        CommandUser = (await ServCom.GetByUser(1));
        bannerDto = await bannerService.Getbanner();
    }
    public async void GetAuth()
    {
        await ServCom.GetAuth();
    }
    public void ShowCommand()
    {
        isCommand = true;
        isProfile = false;
        isFavorite = false;
        isfollower = false;
    }
    public void ShowProfile()
    {
        isProfile = true;
        isCommand = false;
        isFavorite = false;
        isfollower = false;
    }
    public void ShowFavorite()
    {

        isProfile = false;
        isCommand = false;
        isFavorite = true;
        isfollower = false;
    }
    public void ShowFollower()
    {

        isProfile = false;
        isCommand = false;
        isFavorite = false;
        isfollower = true;
    }
    public void WillUpdateBannerOpen()
    {
        willUpdateBanner = true;
    }
    public async Task WillUpdateBannerClose()
    {
        willUpdateBanner = false;
        await Dataload();
    }
    protected async Task auth()
    {
        var state = await AuthenticationStateTask;
        userDto = new UserDto
            {
                User_id= state?.User.Claims?.FirstOrDefault(c=>c.Type=="user_id")?.Value,
                Email = state?.User?.Claims?.FirstOrDefault(c => c.Type == "email")?.Value,
                FamilyName = state?.User.Claims.FirstOrDefault(c => c.Type == "family_name")?.Value,
                GivenName = state?.User.Claims.FirstOrDefault(c => c.Type == "given_name")?.Value,
                Name = state?.User.Claims.FirstOrDefault(c => c.Type == "user_name")?.Value,
                Picture = state?.User.Claims.FirstOrDefault(c => c.Type == "picture")?.Value,
                UserName = state?.User.Claims.FirstOrDefault(c => c.Type == "name")?.Value,


            };
    }
    public async Task NextPage()
    {
        if (CommandUser.HasNextPage)
        {
            pageindex++;
            CommandUser = await ServCom.GetByUser(pageindex);
        }
    }
    public async Task PreviousPage()
    {
        if (CommandUser.HasPreviousPage)
        {
            pageindex--;
            CommandUser = await (ServCom.GetByUser(pageindex));
        }
    }
   
}
