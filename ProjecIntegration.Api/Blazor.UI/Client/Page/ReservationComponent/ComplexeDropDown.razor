@using Blazor.UI.Data.modelViews.Theater
@using Blazor.UI.Data.services.TheatherService
@using Blazor.UI.data.modelViews
@using Blazor.UI.data.services
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IPieceService ServPiece;
@inject NavigationManager namanager;

@if (Complexes != null)
{
    <select @bind="selectedComplexeId" @oninput="SelectionChanged"  class="form-control">
        <option value="">Select Complexe</option>
        @foreach (var complexe in Complexes)
        {
            <option  value="@complexe.Id">@complexe.Name</option>
           
        }
    </select>
        <br />
    @if (PieceTab != null)
    {
        <div class="bg-light m-2 p-2 rounded-4 w-50">
            <div class="m-2 p-2">
                <QuickGrid Items="@PieceTab.AsQueryable()">
                    <PropertyColumn Property="@(p => p.Titre)" Sortable="true" Title="Title" />
                    <PropertyColumn Property="@(p => p.Duree)" Sortable="true" Title="Duration" />
                    
                    <TemplateColumn Title="Representation">
                        <div>
                            <button class="btn btn-warning" type="button" @onclick="() =>GetRepresnetation(context.Id) ">Representation</button>
                        </div>
                        </TemplateColumn>
                    <TemplateColumn Title="Representation">
                        <div>
                            <button class="btn btn-warning" type="button" @onclick="() =>GetInfo(context.Id) ">info</button>
                        </div>
                    </TemplateColumn>
                </QuickGrid >
            </div>
        </div>
    }
    else
    {
      <Blazor.UI.Client.Shared.Load loadParam="Toi qui entre en ce lieux abandonne tout espoire"></Blazor.UI.Client.Shared.Load>
    }
}
else
{
    <Blazor.UI.Client.Shared.Load loadParam="complexe loading"></Blazor.UI.Client.Shared.Load>
}

@code {
    [Parameter]
    public IEnumerable<ComplexeDto>? Complexes { get; set; }

    public IEnumerable<PieceDto>? PieceTab { get; set; }

    [Parameter]
    public ComplexeDto? SingleComplexe { get; set; }

    private int? selectedComplexeId { get; set; }



    protected override void OnParametersSet()
    {
        if (Complexes != null && selectedComplexeId.HasValue)
        {
            SingleComplexe = Complexes.FirstOrDefault(c => c.Id == selectedComplexeId);
        }


    }

    public async Task SearchTheater(int id)
    {
        PieceTab = await ServPiece.GetByComplexe(id);
    }

    public async Task SelectionChanged(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            selectedComplexeId = selectedId;
            await SearchTheater(selectedId);
        }
    }

    public async Task GetRepresnetation(int id)
    {
        namanager.NavigateTo($"/representation/{id}");
    }
    public void GetInfo(int id)
    {
        namanager.NavigateTo($"/pieceinfo/{id}");
    }
}
