@page "/modulereservation"
@inject Blazor.UI.services.IComplexeService CompServ;
@inject Blazor.UI.services.IPieceService PieceServ;
@inject Blazor.UI.services.IRepresentationService repServ;
@using Microsoft.AspNetCore.Components.QuickGrid;
<h3>ReservationV2</h3>

<div class="jumbotron m-2 p-2 mb-4 pb-2 rounded border align-items-start flex-fill">
    <div class="container m-2">
       
        <div class="m-3 p-3 h-100 vw-100">
            @if (ComplexeDtos != null)
            { <div class="btn-group" role="group">

                    <div class="row float-start m-2  rounded">
                        <div class="col ">
                            <select class="form-control w-75 p-3 m-3 shadow-sm" @bind="SelcetcomplexeId" @oninput="SelectComplexe">
                                    <option value="">--SelectComplexe</option>
                                    @foreach(var item in ComplexeDtos)
                                    {
                                    <option value="@item.Id">@item.Name</option>
                                    }
                            </select>
                            </div>
                            @if (PieceDtos !=null)
                            {
                                <div class="col">
                                <select class="form-control w-75 p-3 m-3 shadow-sm" @bind="SelectPieceiD" @oninput="selectPiecebyComplexe">
                                        <option>--Select piece</option>
                                        @foreach(var item in PieceDtos)
                                        {
                                            <option value="@item.Id">@item.Titre</option>
                                        }
                                    </select>
                            </div>
                        }       
                    </div>

                    <br />
                    <div class="row">
                        @if(selectPiece !=null)
                        {
                            <div class="col w-50">
                               <div>
                                    <div class="card" style="width: 18rem;">
                                        <div class="card-body">
                                            <h5 class="card-title">@selectPiece.Titre</h5>
                                            <h6 class="card-subtitle mb-2 text-body-secondary">@selectPiece.Duree</h6>
                                            <p class="card-text">@selectPiece.Description</p>
                                           
                                        </div>
                                    </div>
                               </div>
                           </div>
                            
                        }
                        @if (PieceRep != null)
                        {
                            <div class="col bg-light p-2 m-2 rounded w-50">
                                @if (selectPiece != null)
                                {
                                  <h3 class="display-3">@selectPiece.Titre</h3>
                                }
                   
                                 <p class="lead">Seance</p>
                                 <input type="number" @bind="PlaceNumber" class="form-control ms-2 pe-2 w-25 float-end" />
                                <div class="jumbotron m-2 p-2">
                                    <QuickGrid Class="shadow-sm p-2 m-2" Items="@PieceRep.AsQueryable()">
                                        <PropertyColumn Property="p =>p.Seance" />
                                        <PropertyColumn Property="p =>p.Prix" />
                                        <TemplateColumn>
                                            <div>
                                                <button type="button" class="btn btn-warning p-2 m-2" @onclick="() => commande(context.Id, PlaceNumber)">Commande </button>
                                            </div>
                                        </TemplateColumn>
                                    </QuickGrid>
                                </div>
                            </div>

                        }
          
                    </div>
                </div>
                <div class="p-2 m-2">
                  <Blazor.UI.Client.Page.MakeCommand.DisplayCommand CommandDone="PassCommand"></Blazor.UI.Client.Page.MakeCommand.DisplayCommand>
                </div>
            }
            else
            {
               <div class="btn-group">
                    <Blazor.UI.Client.Shared.Load></Blazor.UI.Client.Shared.Load>
                </div>
             
            }
        </div>
    </div>
</div>

@code {
    public IEnumerable<ComplexeDto>? ComplexeDtos { get; set; }
    public IEnumerable<PieceDto>? PieceDtos { get; set; }
    public IEnumerable<RepresentationDto>? PieceRep { get; set; }
    public List<CommandDto>? PassCommand { get; set; } = new();
    public ComplexeDto? selectComplexe { get; set; }
    public PieceDto? selectPiece { get; set; }

    public int SelcetcomplexeId;
    public int SelectPieceiD;
    public int PlaceNumber { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ComplexeDtos = await CompServ.Get(); 
    }

    public async Task SelectComplexe(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelcetcomplexeId = selectedId;
            selectComplexe = ComplexeDtos.Where(x => x.Id == SelcetcomplexeId).FirstOrDefault();
            await SearchPiece(selectedId);

        }
    }
    public async Task selectPiecebyComplexe(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int selectedId))
        {
            SelectPieceiD = selectedId;
            selectPiece = PieceDtos.Where(x => x.Id == SelectPieceiD).FirstOrDefault();
            await SearchRepresentation(selectedId);
        }
    }
    public async Task SearchPiece(int id)
    {
        PieceDtos = await PieceServ.GetByComplexe(id);
    }
    public async Task SearchRepresentation(int id)
    {
        PieceRep = await repServ.GetPiece(id);
    }

    public void commande(int id,int nomplace)
    {
        var entity = new CommandDto
            {
                IdRepresentation =id,
                NombreDePlace=nomplace,
            };

        PassCommand.Add(entity);
    }
}
